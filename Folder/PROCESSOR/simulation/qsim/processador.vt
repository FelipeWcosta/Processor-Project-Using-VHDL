// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2022 17:17:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_sample_tst(
	clk,
	rst_principal,
	sampler_tx
);
input  clk;
input  rst_principal;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst_principal)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_vlg_check_tst (
	addr_z,
	alu_s0_z,
	alu_s1_z,
	D_addr_z,
	D_rd_z,
	D_wr_z,
	data_I_z,
	I_rd_z,
	nibble_IR_msb_out,
	PC_clr_z,
	PC_ld_z,
	PC_up_z,
	R_data_z,
	RF_Rp_addr_z,
	RF_Rp_rd_z,
	RF_Rp_zero_z,
	RF_Rq_addr_z,
	RF_Rq_rd_z,
	RF_s0_z,
	RF_s1_z,
	RF_W_addr_z,
	RF_W_data_z,
	RF_W_wr_z,
	saida_p,
	W_data_z,
	sampler_rx
);
input [15:0] addr_z;
input  alu_s0_z;
input  alu_s1_z;
input [7:0] D_addr_z;
input  D_rd_z;
input  D_wr_z;
input [15:0] data_I_z;
input  I_rd_z;
input [3:0] nibble_IR_msb_out;
input  PC_clr_z;
input  PC_ld_z;
input  PC_up_z;
input [15:0] R_data_z;
input [3:0] RF_Rp_addr_z;
input  RF_Rp_rd_z;
input  RF_Rp_zero_z;
input [3:0] RF_Rq_addr_z;
input  RF_Rq_rd_z;
input  RF_s0_z;
input  RF_s1_z;
input [3:0] RF_W_addr_z;
input [7:0] RF_W_data_z;
input  RF_W_wr_z;
input [3:0] saida_p;
input [15:0] W_data_z;
input sampler_rx;

reg [15:0] addr_z_expected;
reg  alu_s0_z_expected;
reg  alu_s1_z_expected;
reg [7:0] D_addr_z_expected;
reg  D_rd_z_expected;
reg  D_wr_z_expected;
reg [15:0] data_I_z_expected;
reg  I_rd_z_expected;
reg [3:0] nibble_IR_msb_out_expected;
reg  PC_clr_z_expected;
reg  PC_ld_z_expected;
reg  PC_up_z_expected;
reg [15:0] R_data_z_expected;
reg [3:0] RF_Rp_addr_z_expected;
reg  RF_Rp_rd_z_expected;
reg  RF_Rp_zero_z_expected;
reg [3:0] RF_Rq_addr_z_expected;
reg  RF_Rq_rd_z_expected;
reg  RF_s0_z_expected;
reg  RF_s1_z_expected;
reg [3:0] RF_W_addr_z_expected;
reg [7:0] RF_W_data_z_expected;
reg  RF_W_wr_z_expected;
reg [3:0] saida_p_expected;
reg [15:0] W_data_z_expected;

reg [15:0] addr_z_prev;
reg  alu_s0_z_prev;
reg  alu_s1_z_prev;
reg [7:0] D_addr_z_prev;
reg  D_rd_z_prev;
reg  D_wr_z_prev;
reg [15:0] data_I_z_prev;
reg  I_rd_z_prev;
reg [3:0] nibble_IR_msb_out_prev;
reg  PC_clr_z_prev;
reg  PC_ld_z_prev;
reg  PC_up_z_prev;
reg [15:0] R_data_z_prev;
reg [3:0] RF_Rp_addr_z_prev;
reg  RF_Rp_rd_z_prev;
reg  RF_Rp_zero_z_prev;
reg [3:0] RF_Rq_addr_z_prev;
reg  RF_Rq_rd_z_prev;
reg  RF_s0_z_prev;
reg  RF_s1_z_prev;
reg [3:0] RF_W_addr_z_prev;
reg [7:0] RF_W_data_z_prev;
reg  RF_W_wr_z_prev;
reg [3:0] saida_p_prev;
reg [15:0] W_data_z_prev;

reg [15:0] addr_z_expected_prev;
reg  alu_s0_z_expected_prev;
reg  alu_s1_z_expected_prev;
reg [7:0] D_addr_z_expected_prev;
reg  D_rd_z_expected_prev;
reg  D_wr_z_expected_prev;
reg [15:0] data_I_z_expected_prev;
reg  I_rd_z_expected_prev;
reg [3:0] nibble_IR_msb_out_expected_prev;
reg  PC_clr_z_expected_prev;
reg  PC_ld_z_expected_prev;
reg  PC_up_z_expected_prev;
reg [15:0] R_data_z_expected_prev;
reg [3:0] RF_Rp_addr_z_expected_prev;
reg  RF_Rp_rd_z_expected_prev;
reg  RF_Rp_zero_z_expected_prev;
reg [3:0] RF_Rq_addr_z_expected_prev;
reg  RF_Rq_rd_z_expected_prev;
reg  RF_s0_z_expected_prev;
reg  RF_s1_z_expected_prev;
reg [3:0] RF_W_addr_z_expected_prev;
reg [7:0] RF_W_data_z_expected_prev;
reg  RF_W_wr_z_expected_prev;
reg [3:0] saida_p_expected_prev;
reg [15:0] W_data_z_expected_prev;

reg [15:0] last_addr_z_exp;
reg  last_alu_s0_z_exp;
reg  last_alu_s1_z_exp;
reg [7:0] last_D_addr_z_exp;
reg  last_D_rd_z_exp;
reg  last_D_wr_z_exp;
reg [15:0] last_data_I_z_exp;
reg  last_I_rd_z_exp;
reg [3:0] last_nibble_IR_msb_out_exp;
reg  last_PC_clr_z_exp;
reg  last_PC_ld_z_exp;
reg  last_PC_up_z_exp;
reg [15:0] last_R_data_z_exp;
reg [3:0] last_RF_Rp_addr_z_exp;
reg  last_RF_Rp_rd_z_exp;
reg  last_RF_Rp_zero_z_exp;
reg [3:0] last_RF_Rq_addr_z_exp;
reg  last_RF_Rq_rd_z_exp;
reg  last_RF_s0_z_exp;
reg  last_RF_s1_z_exp;
reg [3:0] last_RF_W_addr_z_exp;
reg [7:0] last_RF_W_data_z_exp;
reg  last_RF_W_wr_z_exp;
reg [3:0] last_saida_p_exp;
reg [15:0] last_W_data_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:25] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 25'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_z_prev = addr_z;
	alu_s0_z_prev = alu_s0_z;
	alu_s1_z_prev = alu_s1_z;
	D_addr_z_prev = D_addr_z;
	D_rd_z_prev = D_rd_z;
	D_wr_z_prev = D_wr_z;
	data_I_z_prev = data_I_z;
	I_rd_z_prev = I_rd_z;
	nibble_IR_msb_out_prev = nibble_IR_msb_out;
	PC_clr_z_prev = PC_clr_z;
	PC_ld_z_prev = PC_ld_z;
	PC_up_z_prev = PC_up_z;
	R_data_z_prev = R_data_z;
	RF_Rp_addr_z_prev = RF_Rp_addr_z;
	RF_Rp_rd_z_prev = RF_Rp_rd_z;
	RF_Rp_zero_z_prev = RF_Rp_zero_z;
	RF_Rq_addr_z_prev = RF_Rq_addr_z;
	RF_Rq_rd_z_prev = RF_Rq_rd_z;
	RF_s0_z_prev = RF_s0_z;
	RF_s1_z_prev = RF_s1_z;
	RF_W_addr_z_prev = RF_W_addr_z;
	RF_W_data_z_prev = RF_W_data_z;
	RF_W_wr_z_prev = RF_W_wr_z;
	saida_p_prev = saida_p;
	W_data_z_prev = W_data_z;
end

// update expected /o prevs

always @(trigger)
begin
	addr_z_expected_prev = addr_z_expected;
	alu_s0_z_expected_prev = alu_s0_z_expected;
	alu_s1_z_expected_prev = alu_s1_z_expected;
	D_addr_z_expected_prev = D_addr_z_expected;
	D_rd_z_expected_prev = D_rd_z_expected;
	D_wr_z_expected_prev = D_wr_z_expected;
	data_I_z_expected_prev = data_I_z_expected;
	I_rd_z_expected_prev = I_rd_z_expected;
	nibble_IR_msb_out_expected_prev = nibble_IR_msb_out_expected;
	PC_clr_z_expected_prev = PC_clr_z_expected;
	PC_ld_z_expected_prev = PC_ld_z_expected;
	PC_up_z_expected_prev = PC_up_z_expected;
	R_data_z_expected_prev = R_data_z_expected;
	RF_Rp_addr_z_expected_prev = RF_Rp_addr_z_expected;
	RF_Rp_rd_z_expected_prev = RF_Rp_rd_z_expected;
	RF_Rp_zero_z_expected_prev = RF_Rp_zero_z_expected;
	RF_Rq_addr_z_expected_prev = RF_Rq_addr_z_expected;
	RF_Rq_rd_z_expected_prev = RF_Rq_rd_z_expected;
	RF_s0_z_expected_prev = RF_s0_z_expected;
	RF_s1_z_expected_prev = RF_s1_z_expected;
	RF_W_addr_z_expected_prev = RF_W_addr_z_expected;
	RF_W_data_z_expected_prev = RF_W_data_z_expected;
	RF_W_wr_z_expected_prev = RF_W_wr_z_expected;
	saida_p_expected_prev = saida_p_expected;
	W_data_z_expected_prev = W_data_z_expected;
end


// expected addr_z[ 15 ]
initial
begin
	addr_z_expected[15] = 1'bX;
end 
// expected addr_z[ 14 ]
initial
begin
	addr_z_expected[14] = 1'bX;
end 
// expected addr_z[ 13 ]
initial
begin
	addr_z_expected[13] = 1'bX;
end 
// expected addr_z[ 12 ]
initial
begin
	addr_z_expected[12] = 1'bX;
end 
// expected addr_z[ 11 ]
initial
begin
	addr_z_expected[11] = 1'bX;
end 
// expected addr_z[ 10 ]
initial
begin
	addr_z_expected[10] = 1'bX;
end 
// expected addr_z[ 9 ]
initial
begin
	addr_z_expected[9] = 1'bX;
end 
// expected addr_z[ 8 ]
initial
begin
	addr_z_expected[8] = 1'bX;
end 
// expected addr_z[ 7 ]
initial
begin
	addr_z_expected[7] = 1'bX;
end 
// expected addr_z[ 6 ]
initial
begin
	addr_z_expected[6] = 1'bX;
end 
// expected addr_z[ 5 ]
initial
begin
	addr_z_expected[5] = 1'bX;
end 
// expected addr_z[ 4 ]
initial
begin
	addr_z_expected[4] = 1'bX;
end 
// expected addr_z[ 3 ]
initial
begin
	addr_z_expected[3] = 1'bX;
end 
// expected addr_z[ 2 ]
initial
begin
	addr_z_expected[2] = 1'bX;
end 
// expected addr_z[ 1 ]
initial
begin
	addr_z_expected[1] = 1'bX;
end 
// expected addr_z[ 0 ]
initial
begin
	addr_z_expected[0] = 1'bX;
end 

// expected alu_s0_z
initial
begin
	alu_s0_z_expected = 1'bX;
end 

// expected alu_s1_z
initial
begin
	alu_s1_z_expected = 1'bX;
end 
// expected D_addr_z[ 7 ]
initial
begin
	D_addr_z_expected[7] = 1'bX;
end 
// expected D_addr_z[ 6 ]
initial
begin
	D_addr_z_expected[6] = 1'bX;
end 
// expected D_addr_z[ 5 ]
initial
begin
	D_addr_z_expected[5] = 1'bX;
end 
// expected D_addr_z[ 4 ]
initial
begin
	D_addr_z_expected[4] = 1'bX;
end 
// expected D_addr_z[ 3 ]
initial
begin
	D_addr_z_expected[3] = 1'bX;
end 
// expected D_addr_z[ 2 ]
initial
begin
	D_addr_z_expected[2] = 1'bX;
end 
// expected D_addr_z[ 1 ]
initial
begin
	D_addr_z_expected[1] = 1'bX;
end 
// expected D_addr_z[ 0 ]
initial
begin
	D_addr_z_expected[0] = 1'bX;
end 

// expected D_rd_z
initial
begin
	D_rd_z_expected = 1'bX;
end 

// expected D_wr_z
initial
begin
	D_wr_z_expected = 1'bX;
end 
// expected data_I_z[ 15 ]
initial
begin
	data_I_z_expected[15] = 1'bX;
end 
// expected data_I_z[ 14 ]
initial
begin
	data_I_z_expected[14] = 1'bX;
end 
// expected data_I_z[ 13 ]
initial
begin
	data_I_z_expected[13] = 1'bX;
end 
// expected data_I_z[ 12 ]
initial
begin
	data_I_z_expected[12] = 1'bX;
end 
// expected data_I_z[ 11 ]
initial
begin
	data_I_z_expected[11] = 1'bX;
end 
// expected data_I_z[ 10 ]
initial
begin
	data_I_z_expected[10] = 1'bX;
end 
// expected data_I_z[ 9 ]
initial
begin
	data_I_z_expected[9] = 1'bX;
end 
// expected data_I_z[ 8 ]
initial
begin
	data_I_z_expected[8] = 1'bX;
end 
// expected data_I_z[ 7 ]
initial
begin
	data_I_z_expected[7] = 1'bX;
end 
// expected data_I_z[ 6 ]
initial
begin
	data_I_z_expected[6] = 1'bX;
end 
// expected data_I_z[ 5 ]
initial
begin
	data_I_z_expected[5] = 1'bX;
end 
// expected data_I_z[ 4 ]
initial
begin
	data_I_z_expected[4] = 1'bX;
end 
// expected data_I_z[ 3 ]
initial
begin
	data_I_z_expected[3] = 1'bX;
end 
// expected data_I_z[ 2 ]
initial
begin
	data_I_z_expected[2] = 1'bX;
end 
// expected data_I_z[ 1 ]
initial
begin
	data_I_z_expected[1] = 1'bX;
end 
// expected data_I_z[ 0 ]
initial
begin
	data_I_z_expected[0] = 1'bX;
end 

// expected I_rd_z
initial
begin
	I_rd_z_expected = 1'bX;
end 
// expected nibble_IR_msb_out[ 3 ]
initial
begin
	nibble_IR_msb_out_expected[3] = 1'bX;
end 
// expected nibble_IR_msb_out[ 2 ]
initial
begin
	nibble_IR_msb_out_expected[2] = 1'bX;
end 
// expected nibble_IR_msb_out[ 1 ]
initial
begin
	nibble_IR_msb_out_expected[1] = 1'bX;
end 
// expected nibble_IR_msb_out[ 0 ]
initial
begin
	nibble_IR_msb_out_expected[0] = 1'bX;
end 

// expected PC_clr_z
initial
begin
	PC_clr_z_expected = 1'bX;
end 

// expected PC_ld_z
initial
begin
	PC_ld_z_expected = 1'bX;
end 

// expected PC_up_z
initial
begin
	PC_up_z_expected = 1'bX;
end 
// expected R_data_z[ 15 ]
initial
begin
	R_data_z_expected[15] = 1'bX;
end 
// expected R_data_z[ 14 ]
initial
begin
	R_data_z_expected[14] = 1'bX;
end 
// expected R_data_z[ 13 ]
initial
begin
	R_data_z_expected[13] = 1'bX;
end 
// expected R_data_z[ 12 ]
initial
begin
	R_data_z_expected[12] = 1'bX;
end 
// expected R_data_z[ 11 ]
initial
begin
	R_data_z_expected[11] = 1'bX;
end 
// expected R_data_z[ 10 ]
initial
begin
	R_data_z_expected[10] = 1'bX;
end 
// expected R_data_z[ 9 ]
initial
begin
	R_data_z_expected[9] = 1'bX;
end 
// expected R_data_z[ 8 ]
initial
begin
	R_data_z_expected[8] = 1'bX;
end 
// expected R_data_z[ 7 ]
initial
begin
	R_data_z_expected[7] = 1'bX;
end 
// expected R_data_z[ 6 ]
initial
begin
	R_data_z_expected[6] = 1'bX;
end 
// expected R_data_z[ 5 ]
initial
begin
	R_data_z_expected[5] = 1'bX;
end 
// expected R_data_z[ 4 ]
initial
begin
	R_data_z_expected[4] = 1'bX;
end 
// expected R_data_z[ 3 ]
initial
begin
	R_data_z_expected[3] = 1'bX;
end 
// expected R_data_z[ 2 ]
initial
begin
	R_data_z_expected[2] = 1'bX;
end 
// expected R_data_z[ 1 ]
initial
begin
	R_data_z_expected[1] = 1'bX;
end 
// expected R_data_z[ 0 ]
initial
begin
	R_data_z_expected[0] = 1'bX;
end 
// expected RF_Rp_addr_z[ 3 ]
initial
begin
	RF_Rp_addr_z_expected[3] = 1'bX;
end 
// expected RF_Rp_addr_z[ 2 ]
initial
begin
	RF_Rp_addr_z_expected[2] = 1'bX;
end 
// expected RF_Rp_addr_z[ 1 ]
initial
begin
	RF_Rp_addr_z_expected[1] = 1'bX;
end 
// expected RF_Rp_addr_z[ 0 ]
initial
begin
	RF_Rp_addr_z_expected[0] = 1'bX;
end 

// expected RF_Rp_rd_z
initial
begin
	RF_Rp_rd_z_expected = 1'bX;
end 

// expected RF_Rp_zero_z
initial
begin
	RF_Rp_zero_z_expected = 1'bX;
end 
// expected RF_Rq_addr_z[ 3 ]
initial
begin
	RF_Rq_addr_z_expected[3] = 1'bX;
end 
// expected RF_Rq_addr_z[ 2 ]
initial
begin
	RF_Rq_addr_z_expected[2] = 1'bX;
end 
// expected RF_Rq_addr_z[ 1 ]
initial
begin
	RF_Rq_addr_z_expected[1] = 1'bX;
end 
// expected RF_Rq_addr_z[ 0 ]
initial
begin
	RF_Rq_addr_z_expected[0] = 1'bX;
end 

// expected RF_Rq_rd_z
initial
begin
	RF_Rq_rd_z_expected = 1'bX;
end 

// expected RF_s0_z
initial
begin
	RF_s0_z_expected = 1'bX;
end 

// expected RF_s1_z
initial
begin
	RF_s1_z_expected = 1'bX;
end 
// expected RF_W_addr_z[ 3 ]
initial
begin
	RF_W_addr_z_expected[3] = 1'bX;
end 
// expected RF_W_addr_z[ 2 ]
initial
begin
	RF_W_addr_z_expected[2] = 1'bX;
end 
// expected RF_W_addr_z[ 1 ]
initial
begin
	RF_W_addr_z_expected[1] = 1'bX;
end 
// expected RF_W_addr_z[ 0 ]
initial
begin
	RF_W_addr_z_expected[0] = 1'bX;
end 
// expected RF_W_data_z[ 7 ]
initial
begin
	RF_W_data_z_expected[7] = 1'bX;
end 
// expected RF_W_data_z[ 6 ]
initial
begin
	RF_W_data_z_expected[6] = 1'bX;
end 
// expected RF_W_data_z[ 5 ]
initial
begin
	RF_W_data_z_expected[5] = 1'bX;
end 
// expected RF_W_data_z[ 4 ]
initial
begin
	RF_W_data_z_expected[4] = 1'bX;
end 
// expected RF_W_data_z[ 3 ]
initial
begin
	RF_W_data_z_expected[3] = 1'bX;
end 
// expected RF_W_data_z[ 2 ]
initial
begin
	RF_W_data_z_expected[2] = 1'bX;
end 
// expected RF_W_data_z[ 1 ]
initial
begin
	RF_W_data_z_expected[1] = 1'bX;
end 
// expected RF_W_data_z[ 0 ]
initial
begin
	RF_W_data_z_expected[0] = 1'bX;
end 

// expected RF_W_wr_z
initial
begin
	RF_W_wr_z_expected = 1'bX;
end 
// expected saida_p[ 3 ]
initial
begin
	saida_p_expected[3] = 1'bX;
end 
// expected saida_p[ 2 ]
initial
begin
	saida_p_expected[2] = 1'bX;
end 
// expected saida_p[ 1 ]
initial
begin
	saida_p_expected[1] = 1'bX;
end 
// expected saida_p[ 0 ]
initial
begin
	saida_p_expected[0] = 1'bX;
end 
// expected W_data_z[ 15 ]
initial
begin
	W_data_z_expected[15] = 1'bX;
end 
// expected W_data_z[ 14 ]
initial
begin
	W_data_z_expected[14] = 1'bX;
end 
// expected W_data_z[ 13 ]
initial
begin
	W_data_z_expected[13] = 1'bX;
end 
// expected W_data_z[ 12 ]
initial
begin
	W_data_z_expected[12] = 1'bX;
end 
// expected W_data_z[ 11 ]
initial
begin
	W_data_z_expected[11] = 1'bX;
end 
// expected W_data_z[ 10 ]
initial
begin
	W_data_z_expected[10] = 1'bX;
end 
// expected W_data_z[ 9 ]
initial
begin
	W_data_z_expected[9] = 1'bX;
end 
// expected W_data_z[ 8 ]
initial
begin
	W_data_z_expected[8] = 1'bX;
end 
// expected W_data_z[ 7 ]
initial
begin
	W_data_z_expected[7] = 1'bX;
end 
// expected W_data_z[ 6 ]
initial
begin
	W_data_z_expected[6] = 1'bX;
end 
// expected W_data_z[ 5 ]
initial
begin
	W_data_z_expected[5] = 1'bX;
end 
// expected W_data_z[ 4 ]
initial
begin
	W_data_z_expected[4] = 1'bX;
end 
// expected W_data_z[ 3 ]
initial
begin
	W_data_z_expected[3] = 1'bX;
end 
// expected W_data_z[ 2 ]
initial
begin
	W_data_z_expected[2] = 1'bX;
end 
// expected W_data_z[ 1 ]
initial
begin
	W_data_z_expected[1] = 1'bX;
end 
// expected W_data_z[ 0 ]
initial
begin
	W_data_z_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_z_expected or addr_z or alu_s0_z_expected or alu_s0_z or alu_s1_z_expected or alu_s1_z or D_addr_z_expected or D_addr_z or D_rd_z_expected or D_rd_z or D_wr_z_expected or D_wr_z or data_I_z_expected or data_I_z or I_rd_z_expected or I_rd_z or nibble_IR_msb_out_expected or nibble_IR_msb_out or PC_clr_z_expected or PC_clr_z or PC_ld_z_expected or PC_ld_z or PC_up_z_expected or PC_up_z or R_data_z_expected or R_data_z or RF_Rp_addr_z_expected or RF_Rp_addr_z or RF_Rp_rd_z_expected or RF_Rp_rd_z or RF_Rp_zero_z_expected or RF_Rp_zero_z or RF_Rq_addr_z_expected or RF_Rq_addr_z or RF_Rq_rd_z_expected or RF_Rq_rd_z or RF_s0_z_expected or RF_s0_z or RF_s1_z_expected or RF_s1_z or RF_W_addr_z_expected or RF_W_addr_z or RF_W_data_z_expected or RF_W_data_z or RF_W_wr_z_expected or RF_W_wr_z or saida_p_expected or saida_p or W_data_z_expected or W_data_z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr_z = %b | expected alu_s0_z = %b | expected alu_s1_z = %b | expected D_addr_z = %b | expected D_rd_z = %b | expected D_wr_z = %b | expected data_I_z = %b | expected I_rd_z = %b | expected nibble_IR_msb_out = %b | expected PC_clr_z = %b | expected PC_ld_z = %b | expected PC_up_z = %b | expected R_data_z = %b | expected RF_Rp_addr_z = %b | expected RF_Rp_rd_z = %b | expected RF_Rp_zero_z = %b | expected RF_Rq_addr_z = %b | expected RF_Rq_rd_z = %b | expected RF_s0_z = %b | expected RF_s1_z = %b | expected RF_W_addr_z = %b | expected RF_W_data_z = %b | expected RF_W_wr_z = %b | expected saida_p = %b | expected W_data_z = %b | ",addr_z_expected_prev,alu_s0_z_expected_prev,alu_s1_z_expected_prev,D_addr_z_expected_prev,D_rd_z_expected_prev,D_wr_z_expected_prev,data_I_z_expected_prev,I_rd_z_expected_prev,nibble_IR_msb_out_expected_prev,PC_clr_z_expected_prev,PC_ld_z_expected_prev,PC_up_z_expected_prev,R_data_z_expected_prev,RF_Rp_addr_z_expected_prev,RF_Rp_rd_z_expected_prev,RF_Rp_zero_z_expected_prev,RF_Rq_addr_z_expected_prev,RF_Rq_rd_z_expected_prev,RF_s0_z_expected_prev,RF_s1_z_expected_prev,RF_W_addr_z_expected_prev,RF_W_data_z_expected_prev,RF_W_wr_z_expected_prev,saida_p_expected_prev,W_data_z_expected_prev);
	$display("| real addr_z = %b | real alu_s0_z = %b | real alu_s1_z = %b | real D_addr_z = %b | real D_rd_z = %b | real D_wr_z = %b | real data_I_z = %b | real I_rd_z = %b | real nibble_IR_msb_out = %b | real PC_clr_z = %b | real PC_ld_z = %b | real PC_up_z = %b | real R_data_z = %b | real RF_Rp_addr_z = %b | real RF_Rp_rd_z = %b | real RF_Rp_zero_z = %b | real RF_Rq_addr_z = %b | real RF_Rq_rd_z = %b | real RF_s0_z = %b | real RF_s1_z = %b | real RF_W_addr_z = %b | real RF_W_data_z = %b | real RF_W_wr_z = %b | real saida_p = %b | real W_data_z = %b | ",addr_z_prev,alu_s0_z_prev,alu_s1_z_prev,D_addr_z_prev,D_rd_z_prev,D_wr_z_prev,data_I_z_prev,I_rd_z_prev,nibble_IR_msb_out_prev,PC_clr_z_prev,PC_ld_z_prev,PC_up_z_prev,R_data_z_prev,RF_Rp_addr_z_prev,RF_Rp_rd_z_prev,RF_Rp_zero_z_prev,RF_Rq_addr_z_prev,RF_Rq_rd_z_prev,RF_s0_z_prev,RF_s1_z_prev,RF_W_addr_z_prev,RF_W_data_z_prev,RF_W_wr_z_prev,saida_p_prev,W_data_z_prev);
`endif
	if (
		( addr_z_expected_prev[0] !== 1'bx ) && ( addr_z_prev[0] !== addr_z_expected_prev[0] )
		&& ((addr_z_expected_prev[0] !== last_addr_z_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[0] = addr_z_expected_prev[0];
	end
	if (
		( addr_z_expected_prev[1] !== 1'bx ) && ( addr_z_prev[1] !== addr_z_expected_prev[1] )
		&& ((addr_z_expected_prev[1] !== last_addr_z_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[1] = addr_z_expected_prev[1];
	end
	if (
		( addr_z_expected_prev[2] !== 1'bx ) && ( addr_z_prev[2] !== addr_z_expected_prev[2] )
		&& ((addr_z_expected_prev[2] !== last_addr_z_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[2] = addr_z_expected_prev[2];
	end
	if (
		( addr_z_expected_prev[3] !== 1'bx ) && ( addr_z_prev[3] !== addr_z_expected_prev[3] )
		&& ((addr_z_expected_prev[3] !== last_addr_z_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[3] = addr_z_expected_prev[3];
	end
	if (
		( addr_z_expected_prev[4] !== 1'bx ) && ( addr_z_prev[4] !== addr_z_expected_prev[4] )
		&& ((addr_z_expected_prev[4] !== last_addr_z_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[4] = addr_z_expected_prev[4];
	end
	if (
		( addr_z_expected_prev[5] !== 1'bx ) && ( addr_z_prev[5] !== addr_z_expected_prev[5] )
		&& ((addr_z_expected_prev[5] !== last_addr_z_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[5] = addr_z_expected_prev[5];
	end
	if (
		( addr_z_expected_prev[6] !== 1'bx ) && ( addr_z_prev[6] !== addr_z_expected_prev[6] )
		&& ((addr_z_expected_prev[6] !== last_addr_z_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[6] = addr_z_expected_prev[6];
	end
	if (
		( addr_z_expected_prev[7] !== 1'bx ) && ( addr_z_prev[7] !== addr_z_expected_prev[7] )
		&& ((addr_z_expected_prev[7] !== last_addr_z_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[7] = addr_z_expected_prev[7];
	end
	if (
		( addr_z_expected_prev[8] !== 1'bx ) && ( addr_z_prev[8] !== addr_z_expected_prev[8] )
		&& ((addr_z_expected_prev[8] !== last_addr_z_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[8] = addr_z_expected_prev[8];
	end
	if (
		( addr_z_expected_prev[9] !== 1'bx ) && ( addr_z_prev[9] !== addr_z_expected_prev[9] )
		&& ((addr_z_expected_prev[9] !== last_addr_z_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[9] = addr_z_expected_prev[9];
	end
	if (
		( addr_z_expected_prev[10] !== 1'bx ) && ( addr_z_prev[10] !== addr_z_expected_prev[10] )
		&& ((addr_z_expected_prev[10] !== last_addr_z_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[10] = addr_z_expected_prev[10];
	end
	if (
		( addr_z_expected_prev[11] !== 1'bx ) && ( addr_z_prev[11] !== addr_z_expected_prev[11] )
		&& ((addr_z_expected_prev[11] !== last_addr_z_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[11] = addr_z_expected_prev[11];
	end
	if (
		( addr_z_expected_prev[12] !== 1'bx ) && ( addr_z_prev[12] !== addr_z_expected_prev[12] )
		&& ((addr_z_expected_prev[12] !== last_addr_z_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[12] = addr_z_expected_prev[12];
	end
	if (
		( addr_z_expected_prev[13] !== 1'bx ) && ( addr_z_prev[13] !== addr_z_expected_prev[13] )
		&& ((addr_z_expected_prev[13] !== last_addr_z_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[13] = addr_z_expected_prev[13];
	end
	if (
		( addr_z_expected_prev[14] !== 1'bx ) && ( addr_z_prev[14] !== addr_z_expected_prev[14] )
		&& ((addr_z_expected_prev[14] !== last_addr_z_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[14] = addr_z_expected_prev[14];
	end
	if (
		( addr_z_expected_prev[15] !== 1'bx ) && ( addr_z_prev[15] !== addr_z_expected_prev[15] )
		&& ((addr_z_expected_prev[15] !== last_addr_z_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_z[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_z_expected_prev);
		$display ("     Real value = %b", addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_z_exp[15] = addr_z_expected_prev[15];
	end
	if (
		( alu_s0_z_expected_prev !== 1'bx ) && ( alu_s0_z_prev !== alu_s0_z_expected_prev )
		&& ((alu_s0_z_expected_prev !== last_alu_s0_z_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s0_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s0_z_expected_prev);
		$display ("     Real value = %b", alu_s0_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_s0_z_exp = alu_s0_z_expected_prev;
	end
	if (
		( alu_s1_z_expected_prev !== 1'bx ) && ( alu_s1_z_prev !== alu_s1_z_expected_prev )
		&& ((alu_s1_z_expected_prev !== last_alu_s1_z_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s1_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s1_z_expected_prev);
		$display ("     Real value = %b", alu_s1_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_s1_z_exp = alu_s1_z_expected_prev;
	end
	if (
		( D_addr_z_expected_prev[0] !== 1'bx ) && ( D_addr_z_prev[0] !== D_addr_z_expected_prev[0] )
		&& ((D_addr_z_expected_prev[0] !== last_D_addr_z_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[0] = D_addr_z_expected_prev[0];
	end
	if (
		( D_addr_z_expected_prev[1] !== 1'bx ) && ( D_addr_z_prev[1] !== D_addr_z_expected_prev[1] )
		&& ((D_addr_z_expected_prev[1] !== last_D_addr_z_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[1] = D_addr_z_expected_prev[1];
	end
	if (
		( D_addr_z_expected_prev[2] !== 1'bx ) && ( D_addr_z_prev[2] !== D_addr_z_expected_prev[2] )
		&& ((D_addr_z_expected_prev[2] !== last_D_addr_z_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[2] = D_addr_z_expected_prev[2];
	end
	if (
		( D_addr_z_expected_prev[3] !== 1'bx ) && ( D_addr_z_prev[3] !== D_addr_z_expected_prev[3] )
		&& ((D_addr_z_expected_prev[3] !== last_D_addr_z_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[3] = D_addr_z_expected_prev[3];
	end
	if (
		( D_addr_z_expected_prev[4] !== 1'bx ) && ( D_addr_z_prev[4] !== D_addr_z_expected_prev[4] )
		&& ((D_addr_z_expected_prev[4] !== last_D_addr_z_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[4] = D_addr_z_expected_prev[4];
	end
	if (
		( D_addr_z_expected_prev[5] !== 1'bx ) && ( D_addr_z_prev[5] !== D_addr_z_expected_prev[5] )
		&& ((D_addr_z_expected_prev[5] !== last_D_addr_z_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[5] = D_addr_z_expected_prev[5];
	end
	if (
		( D_addr_z_expected_prev[6] !== 1'bx ) && ( D_addr_z_prev[6] !== D_addr_z_expected_prev[6] )
		&& ((D_addr_z_expected_prev[6] !== last_D_addr_z_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[6] = D_addr_z_expected_prev[6];
	end
	if (
		( D_addr_z_expected_prev[7] !== 1'bx ) && ( D_addr_z_prev[7] !== D_addr_z_expected_prev[7] )
		&& ((D_addr_z_expected_prev[7] !== last_D_addr_z_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_z_expected_prev);
		$display ("     Real value = %b", D_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_z_exp[7] = D_addr_z_expected_prev[7];
	end
	if (
		( D_rd_z_expected_prev !== 1'bx ) && ( D_rd_z_prev !== D_rd_z_expected_prev )
		&& ((D_rd_z_expected_prev !== last_D_rd_z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rd_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rd_z_expected_prev);
		$display ("     Real value = %b", D_rd_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_rd_z_exp = D_rd_z_expected_prev;
	end
	if (
		( D_wr_z_expected_prev !== 1'bx ) && ( D_wr_z_prev !== D_wr_z_expected_prev )
		&& ((D_wr_z_expected_prev !== last_D_wr_z_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_wr_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_wr_z_expected_prev);
		$display ("     Real value = %b", D_wr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_wr_z_exp = D_wr_z_expected_prev;
	end
	if (
		( data_I_z_expected_prev[0] !== 1'bx ) && ( data_I_z_prev[0] !== data_I_z_expected_prev[0] )
		&& ((data_I_z_expected_prev[0] !== last_data_I_z_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[0] = data_I_z_expected_prev[0];
	end
	if (
		( data_I_z_expected_prev[1] !== 1'bx ) && ( data_I_z_prev[1] !== data_I_z_expected_prev[1] )
		&& ((data_I_z_expected_prev[1] !== last_data_I_z_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[1] = data_I_z_expected_prev[1];
	end
	if (
		( data_I_z_expected_prev[2] !== 1'bx ) && ( data_I_z_prev[2] !== data_I_z_expected_prev[2] )
		&& ((data_I_z_expected_prev[2] !== last_data_I_z_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[2] = data_I_z_expected_prev[2];
	end
	if (
		( data_I_z_expected_prev[3] !== 1'bx ) && ( data_I_z_prev[3] !== data_I_z_expected_prev[3] )
		&& ((data_I_z_expected_prev[3] !== last_data_I_z_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[3] = data_I_z_expected_prev[3];
	end
	if (
		( data_I_z_expected_prev[4] !== 1'bx ) && ( data_I_z_prev[4] !== data_I_z_expected_prev[4] )
		&& ((data_I_z_expected_prev[4] !== last_data_I_z_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[4] = data_I_z_expected_prev[4];
	end
	if (
		( data_I_z_expected_prev[5] !== 1'bx ) && ( data_I_z_prev[5] !== data_I_z_expected_prev[5] )
		&& ((data_I_z_expected_prev[5] !== last_data_I_z_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[5] = data_I_z_expected_prev[5];
	end
	if (
		( data_I_z_expected_prev[6] !== 1'bx ) && ( data_I_z_prev[6] !== data_I_z_expected_prev[6] )
		&& ((data_I_z_expected_prev[6] !== last_data_I_z_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[6] = data_I_z_expected_prev[6];
	end
	if (
		( data_I_z_expected_prev[7] !== 1'bx ) && ( data_I_z_prev[7] !== data_I_z_expected_prev[7] )
		&& ((data_I_z_expected_prev[7] !== last_data_I_z_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[7] = data_I_z_expected_prev[7];
	end
	if (
		( data_I_z_expected_prev[8] !== 1'bx ) && ( data_I_z_prev[8] !== data_I_z_expected_prev[8] )
		&& ((data_I_z_expected_prev[8] !== last_data_I_z_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[8] = data_I_z_expected_prev[8];
	end
	if (
		( data_I_z_expected_prev[9] !== 1'bx ) && ( data_I_z_prev[9] !== data_I_z_expected_prev[9] )
		&& ((data_I_z_expected_prev[9] !== last_data_I_z_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[9] = data_I_z_expected_prev[9];
	end
	if (
		( data_I_z_expected_prev[10] !== 1'bx ) && ( data_I_z_prev[10] !== data_I_z_expected_prev[10] )
		&& ((data_I_z_expected_prev[10] !== last_data_I_z_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[10] = data_I_z_expected_prev[10];
	end
	if (
		( data_I_z_expected_prev[11] !== 1'bx ) && ( data_I_z_prev[11] !== data_I_z_expected_prev[11] )
		&& ((data_I_z_expected_prev[11] !== last_data_I_z_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[11] = data_I_z_expected_prev[11];
	end
	if (
		( data_I_z_expected_prev[12] !== 1'bx ) && ( data_I_z_prev[12] !== data_I_z_expected_prev[12] )
		&& ((data_I_z_expected_prev[12] !== last_data_I_z_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[12] = data_I_z_expected_prev[12];
	end
	if (
		( data_I_z_expected_prev[13] !== 1'bx ) && ( data_I_z_prev[13] !== data_I_z_expected_prev[13] )
		&& ((data_I_z_expected_prev[13] !== last_data_I_z_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[13] = data_I_z_expected_prev[13];
	end
	if (
		( data_I_z_expected_prev[14] !== 1'bx ) && ( data_I_z_prev[14] !== data_I_z_expected_prev[14] )
		&& ((data_I_z_expected_prev[14] !== last_data_I_z_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[14] = data_I_z_expected_prev[14];
	end
	if (
		( data_I_z_expected_prev[15] !== 1'bx ) && ( data_I_z_prev[15] !== data_I_z_expected_prev[15] )
		&& ((data_I_z_expected_prev[15] !== last_data_I_z_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_I_z[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_I_z_expected_prev);
		$display ("     Real value = %b", data_I_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_I_z_exp[15] = data_I_z_expected_prev[15];
	end
	if (
		( I_rd_z_expected_prev !== 1'bx ) && ( I_rd_z_prev !== I_rd_z_expected_prev )
		&& ((I_rd_z_expected_prev !== last_I_rd_z_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_z_expected_prev);
		$display ("     Real value = %b", I_rd_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_I_rd_z_exp = I_rd_z_expected_prev;
	end
	if (
		( nibble_IR_msb_out_expected_prev[0] !== 1'bx ) && ( nibble_IR_msb_out_prev[0] !== nibble_IR_msb_out_expected_prev[0] )
		&& ((nibble_IR_msb_out_expected_prev[0] !== last_nibble_IR_msb_out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nibble_IR_msb_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nibble_IR_msb_out_expected_prev);
		$display ("     Real value = %b", nibble_IR_msb_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nibble_IR_msb_out_exp[0] = nibble_IR_msb_out_expected_prev[0];
	end
	if (
		( nibble_IR_msb_out_expected_prev[1] !== 1'bx ) && ( nibble_IR_msb_out_prev[1] !== nibble_IR_msb_out_expected_prev[1] )
		&& ((nibble_IR_msb_out_expected_prev[1] !== last_nibble_IR_msb_out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nibble_IR_msb_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nibble_IR_msb_out_expected_prev);
		$display ("     Real value = %b", nibble_IR_msb_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nibble_IR_msb_out_exp[1] = nibble_IR_msb_out_expected_prev[1];
	end
	if (
		( nibble_IR_msb_out_expected_prev[2] !== 1'bx ) && ( nibble_IR_msb_out_prev[2] !== nibble_IR_msb_out_expected_prev[2] )
		&& ((nibble_IR_msb_out_expected_prev[2] !== last_nibble_IR_msb_out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nibble_IR_msb_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nibble_IR_msb_out_expected_prev);
		$display ("     Real value = %b", nibble_IR_msb_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nibble_IR_msb_out_exp[2] = nibble_IR_msb_out_expected_prev[2];
	end
	if (
		( nibble_IR_msb_out_expected_prev[3] !== 1'bx ) && ( nibble_IR_msb_out_prev[3] !== nibble_IR_msb_out_expected_prev[3] )
		&& ((nibble_IR_msb_out_expected_prev[3] !== last_nibble_IR_msb_out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nibble_IR_msb_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nibble_IR_msb_out_expected_prev);
		$display ("     Real value = %b", nibble_IR_msb_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nibble_IR_msb_out_exp[3] = nibble_IR_msb_out_expected_prev[3];
	end
	if (
		( PC_clr_z_expected_prev !== 1'bx ) && ( PC_clr_z_prev !== PC_clr_z_expected_prev )
		&& ((PC_clr_z_expected_prev !== last_PC_clr_z_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_clr_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_clr_z_expected_prev);
		$display ("     Real value = %b", PC_clr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_clr_z_exp = PC_clr_z_expected_prev;
	end
	if (
		( PC_ld_z_expected_prev !== 1'bx ) && ( PC_ld_z_prev !== PC_ld_z_expected_prev )
		&& ((PC_ld_z_expected_prev !== last_PC_ld_z_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_ld_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_ld_z_expected_prev);
		$display ("     Real value = %b", PC_ld_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PC_ld_z_exp = PC_ld_z_expected_prev;
	end
	if (
		( PC_up_z_expected_prev !== 1'bx ) && ( PC_up_z_prev !== PC_up_z_expected_prev )
		&& ((PC_up_z_expected_prev !== last_PC_up_z_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_up_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_up_z_expected_prev);
		$display ("     Real value = %b", PC_up_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PC_up_z_exp = PC_up_z_expected_prev;
	end
	if (
		( R_data_z_expected_prev[0] !== 1'bx ) && ( R_data_z_prev[0] !== R_data_z_expected_prev[0] )
		&& ((R_data_z_expected_prev[0] !== last_R_data_z_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[0] = R_data_z_expected_prev[0];
	end
	if (
		( R_data_z_expected_prev[1] !== 1'bx ) && ( R_data_z_prev[1] !== R_data_z_expected_prev[1] )
		&& ((R_data_z_expected_prev[1] !== last_R_data_z_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[1] = R_data_z_expected_prev[1];
	end
	if (
		( R_data_z_expected_prev[2] !== 1'bx ) && ( R_data_z_prev[2] !== R_data_z_expected_prev[2] )
		&& ((R_data_z_expected_prev[2] !== last_R_data_z_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[2] = R_data_z_expected_prev[2];
	end
	if (
		( R_data_z_expected_prev[3] !== 1'bx ) && ( R_data_z_prev[3] !== R_data_z_expected_prev[3] )
		&& ((R_data_z_expected_prev[3] !== last_R_data_z_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[3] = R_data_z_expected_prev[3];
	end
	if (
		( R_data_z_expected_prev[4] !== 1'bx ) && ( R_data_z_prev[4] !== R_data_z_expected_prev[4] )
		&& ((R_data_z_expected_prev[4] !== last_R_data_z_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[4] = R_data_z_expected_prev[4];
	end
	if (
		( R_data_z_expected_prev[5] !== 1'bx ) && ( R_data_z_prev[5] !== R_data_z_expected_prev[5] )
		&& ((R_data_z_expected_prev[5] !== last_R_data_z_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[5] = R_data_z_expected_prev[5];
	end
	if (
		( R_data_z_expected_prev[6] !== 1'bx ) && ( R_data_z_prev[6] !== R_data_z_expected_prev[6] )
		&& ((R_data_z_expected_prev[6] !== last_R_data_z_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[6] = R_data_z_expected_prev[6];
	end
	if (
		( R_data_z_expected_prev[7] !== 1'bx ) && ( R_data_z_prev[7] !== R_data_z_expected_prev[7] )
		&& ((R_data_z_expected_prev[7] !== last_R_data_z_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[7] = R_data_z_expected_prev[7];
	end
	if (
		( R_data_z_expected_prev[8] !== 1'bx ) && ( R_data_z_prev[8] !== R_data_z_expected_prev[8] )
		&& ((R_data_z_expected_prev[8] !== last_R_data_z_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[8] = R_data_z_expected_prev[8];
	end
	if (
		( R_data_z_expected_prev[9] !== 1'bx ) && ( R_data_z_prev[9] !== R_data_z_expected_prev[9] )
		&& ((R_data_z_expected_prev[9] !== last_R_data_z_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[9] = R_data_z_expected_prev[9];
	end
	if (
		( R_data_z_expected_prev[10] !== 1'bx ) && ( R_data_z_prev[10] !== R_data_z_expected_prev[10] )
		&& ((R_data_z_expected_prev[10] !== last_R_data_z_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[10] = R_data_z_expected_prev[10];
	end
	if (
		( R_data_z_expected_prev[11] !== 1'bx ) && ( R_data_z_prev[11] !== R_data_z_expected_prev[11] )
		&& ((R_data_z_expected_prev[11] !== last_R_data_z_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[11] = R_data_z_expected_prev[11];
	end
	if (
		( R_data_z_expected_prev[12] !== 1'bx ) && ( R_data_z_prev[12] !== R_data_z_expected_prev[12] )
		&& ((R_data_z_expected_prev[12] !== last_R_data_z_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[12] = R_data_z_expected_prev[12];
	end
	if (
		( R_data_z_expected_prev[13] !== 1'bx ) && ( R_data_z_prev[13] !== R_data_z_expected_prev[13] )
		&& ((R_data_z_expected_prev[13] !== last_R_data_z_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[13] = R_data_z_expected_prev[13];
	end
	if (
		( R_data_z_expected_prev[14] !== 1'bx ) && ( R_data_z_prev[14] !== R_data_z_expected_prev[14] )
		&& ((R_data_z_expected_prev[14] !== last_R_data_z_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[14] = R_data_z_expected_prev[14];
	end
	if (
		( R_data_z_expected_prev[15] !== 1'bx ) && ( R_data_z_prev[15] !== R_data_z_expected_prev[15] )
		&& ((R_data_z_expected_prev[15] !== last_R_data_z_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_data_z[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_data_z_expected_prev);
		$display ("     Real value = %b", R_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R_data_z_exp[15] = R_data_z_expected_prev[15];
	end
	if (
		( RF_Rp_addr_z_expected_prev[0] !== 1'bx ) && ( RF_Rp_addr_z_prev[0] !== RF_Rp_addr_z_expected_prev[0] )
		&& ((RF_Rp_addr_z_expected_prev[0] !== last_RF_Rp_addr_z_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rp_addr_z_exp[0] = RF_Rp_addr_z_expected_prev[0];
	end
	if (
		( RF_Rp_addr_z_expected_prev[1] !== 1'bx ) && ( RF_Rp_addr_z_prev[1] !== RF_Rp_addr_z_expected_prev[1] )
		&& ((RF_Rp_addr_z_expected_prev[1] !== last_RF_Rp_addr_z_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rp_addr_z_exp[1] = RF_Rp_addr_z_expected_prev[1];
	end
	if (
		( RF_Rp_addr_z_expected_prev[2] !== 1'bx ) && ( RF_Rp_addr_z_prev[2] !== RF_Rp_addr_z_expected_prev[2] )
		&& ((RF_Rp_addr_z_expected_prev[2] !== last_RF_Rp_addr_z_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rp_addr_z_exp[2] = RF_Rp_addr_z_expected_prev[2];
	end
	if (
		( RF_Rp_addr_z_expected_prev[3] !== 1'bx ) && ( RF_Rp_addr_z_prev[3] !== RF_Rp_addr_z_expected_prev[3] )
		&& ((RF_Rp_addr_z_expected_prev[3] !== last_RF_Rp_addr_z_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rp_addr_z_exp[3] = RF_Rp_addr_z_expected_prev[3];
	end
	if (
		( RF_Rp_rd_z_expected_prev !== 1'bx ) && ( RF_Rp_rd_z_prev !== RF_Rp_rd_z_expected_prev )
		&& ((RF_Rp_rd_z_expected_prev !== last_RF_Rp_rd_z_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_rd_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_rd_z_expected_prev);
		$display ("     Real value = %b", RF_Rp_rd_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_Rp_rd_z_exp = RF_Rp_rd_z_expected_prev;
	end
	if (
		( RF_Rp_zero_z_expected_prev !== 1'bx ) && ( RF_Rp_zero_z_prev !== RF_Rp_zero_z_expected_prev )
		&& ((RF_Rp_zero_z_expected_prev !== last_RF_Rp_zero_z_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_zero_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_zero_z_expected_prev);
		$display ("     Real value = %b", RF_Rp_zero_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_Rp_zero_z_exp = RF_Rp_zero_z_expected_prev;
	end
	if (
		( RF_Rq_addr_z_expected_prev[0] !== 1'bx ) && ( RF_Rq_addr_z_prev[0] !== RF_Rq_addr_z_expected_prev[0] )
		&& ((RF_Rq_addr_z_expected_prev[0] !== last_RF_Rq_addr_z_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_z_exp[0] = RF_Rq_addr_z_expected_prev[0];
	end
	if (
		( RF_Rq_addr_z_expected_prev[1] !== 1'bx ) && ( RF_Rq_addr_z_prev[1] !== RF_Rq_addr_z_expected_prev[1] )
		&& ((RF_Rq_addr_z_expected_prev[1] !== last_RF_Rq_addr_z_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_z_exp[1] = RF_Rq_addr_z_expected_prev[1];
	end
	if (
		( RF_Rq_addr_z_expected_prev[2] !== 1'bx ) && ( RF_Rq_addr_z_prev[2] !== RF_Rq_addr_z_expected_prev[2] )
		&& ((RF_Rq_addr_z_expected_prev[2] !== last_RF_Rq_addr_z_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_z_exp[2] = RF_Rq_addr_z_expected_prev[2];
	end
	if (
		( RF_Rq_addr_z_expected_prev[3] !== 1'bx ) && ( RF_Rq_addr_z_prev[3] !== RF_Rq_addr_z_expected_prev[3] )
		&& ((RF_Rq_addr_z_expected_prev[3] !== last_RF_Rq_addr_z_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_z_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_Rq_addr_z_exp[3] = RF_Rq_addr_z_expected_prev[3];
	end
	if (
		( RF_Rq_rd_z_expected_prev !== 1'bx ) && ( RF_Rq_rd_z_prev !== RF_Rq_rd_z_expected_prev )
		&& ((RF_Rq_rd_z_expected_prev !== last_RF_Rq_rd_z_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_rd_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_rd_z_expected_prev);
		$display ("     Real value = %b", RF_Rq_rd_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_Rq_rd_z_exp = RF_Rq_rd_z_expected_prev;
	end
	if (
		( RF_s0_z_expected_prev !== 1'bx ) && ( RF_s0_z_prev !== RF_s0_z_expected_prev )
		&& ((RF_s0_z_expected_prev !== last_RF_s0_z_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s0_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s0_z_expected_prev);
		$display ("     Real value = %b", RF_s0_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_RF_s0_z_exp = RF_s0_z_expected_prev;
	end
	if (
		( RF_s1_z_expected_prev !== 1'bx ) && ( RF_s1_z_prev !== RF_s1_z_expected_prev )
		&& ((RF_s1_z_expected_prev !== last_RF_s1_z_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s1_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s1_z_expected_prev);
		$display ("     Real value = %b", RF_s1_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RF_s1_z_exp = RF_s1_z_expected_prev;
	end
	if (
		( RF_W_addr_z_expected_prev[0] !== 1'bx ) && ( RF_W_addr_z_prev[0] !== RF_W_addr_z_expected_prev[0] )
		&& ((RF_W_addr_z_expected_prev[0] !== last_RF_W_addr_z_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_z_expected_prev);
		$display ("     Real value = %b", RF_W_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_z_exp[0] = RF_W_addr_z_expected_prev[0];
	end
	if (
		( RF_W_addr_z_expected_prev[1] !== 1'bx ) && ( RF_W_addr_z_prev[1] !== RF_W_addr_z_expected_prev[1] )
		&& ((RF_W_addr_z_expected_prev[1] !== last_RF_W_addr_z_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_z_expected_prev);
		$display ("     Real value = %b", RF_W_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_z_exp[1] = RF_W_addr_z_expected_prev[1];
	end
	if (
		( RF_W_addr_z_expected_prev[2] !== 1'bx ) && ( RF_W_addr_z_prev[2] !== RF_W_addr_z_expected_prev[2] )
		&& ((RF_W_addr_z_expected_prev[2] !== last_RF_W_addr_z_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_z_expected_prev);
		$display ("     Real value = %b", RF_W_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_z_exp[2] = RF_W_addr_z_expected_prev[2];
	end
	if (
		( RF_W_addr_z_expected_prev[3] !== 1'bx ) && ( RF_W_addr_z_prev[3] !== RF_W_addr_z_expected_prev[3] )
		&& ((RF_W_addr_z_expected_prev[3] !== last_RF_W_addr_z_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_z_expected_prev);
		$display ("     Real value = %b", RF_W_addr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RF_W_addr_z_exp[3] = RF_W_addr_z_expected_prev[3];
	end
	if (
		( RF_W_data_z_expected_prev[0] !== 1'bx ) && ( RF_W_data_z_prev[0] !== RF_W_data_z_expected_prev[0] )
		&& ((RF_W_data_z_expected_prev[0] !== last_RF_W_data_z_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[0] = RF_W_data_z_expected_prev[0];
	end
	if (
		( RF_W_data_z_expected_prev[1] !== 1'bx ) && ( RF_W_data_z_prev[1] !== RF_W_data_z_expected_prev[1] )
		&& ((RF_W_data_z_expected_prev[1] !== last_RF_W_data_z_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[1] = RF_W_data_z_expected_prev[1];
	end
	if (
		( RF_W_data_z_expected_prev[2] !== 1'bx ) && ( RF_W_data_z_prev[2] !== RF_W_data_z_expected_prev[2] )
		&& ((RF_W_data_z_expected_prev[2] !== last_RF_W_data_z_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[2] = RF_W_data_z_expected_prev[2];
	end
	if (
		( RF_W_data_z_expected_prev[3] !== 1'bx ) && ( RF_W_data_z_prev[3] !== RF_W_data_z_expected_prev[3] )
		&& ((RF_W_data_z_expected_prev[3] !== last_RF_W_data_z_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[3] = RF_W_data_z_expected_prev[3];
	end
	if (
		( RF_W_data_z_expected_prev[4] !== 1'bx ) && ( RF_W_data_z_prev[4] !== RF_W_data_z_expected_prev[4] )
		&& ((RF_W_data_z_expected_prev[4] !== last_RF_W_data_z_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[4] = RF_W_data_z_expected_prev[4];
	end
	if (
		( RF_W_data_z_expected_prev[5] !== 1'bx ) && ( RF_W_data_z_prev[5] !== RF_W_data_z_expected_prev[5] )
		&& ((RF_W_data_z_expected_prev[5] !== last_RF_W_data_z_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[5] = RF_W_data_z_expected_prev[5];
	end
	if (
		( RF_W_data_z_expected_prev[6] !== 1'bx ) && ( RF_W_data_z_prev[6] !== RF_W_data_z_expected_prev[6] )
		&& ((RF_W_data_z_expected_prev[6] !== last_RF_W_data_z_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[6] = RF_W_data_z_expected_prev[6];
	end
	if (
		( RF_W_data_z_expected_prev[7] !== 1'bx ) && ( RF_W_data_z_prev[7] !== RF_W_data_z_expected_prev[7] )
		&& ((RF_W_data_z_expected_prev[7] !== last_RF_W_data_z_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_z_expected_prev);
		$display ("     Real value = %b", RF_W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_RF_W_data_z_exp[7] = RF_W_data_z_expected_prev[7];
	end
	if (
		( RF_W_wr_z_expected_prev !== 1'bx ) && ( RF_W_wr_z_prev !== RF_W_wr_z_expected_prev )
		&& ((RF_W_wr_z_expected_prev !== last_RF_W_wr_z_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_wr_z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_wr_z_expected_prev);
		$display ("     Real value = %b", RF_W_wr_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_RF_W_wr_z_exp = RF_W_wr_z_expected_prev;
	end
	if (
		( saida_p_expected_prev[0] !== 1'bx ) && ( saida_p_prev[0] !== saida_p_expected_prev[0] )
		&& ((saida_p_expected_prev[0] !== last_saida_p_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_p[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_p_expected_prev);
		$display ("     Real value = %b", saida_p_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_p_exp[0] = saida_p_expected_prev[0];
	end
	if (
		( saida_p_expected_prev[1] !== 1'bx ) && ( saida_p_prev[1] !== saida_p_expected_prev[1] )
		&& ((saida_p_expected_prev[1] !== last_saida_p_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_p[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_p_expected_prev);
		$display ("     Real value = %b", saida_p_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_p_exp[1] = saida_p_expected_prev[1];
	end
	if (
		( saida_p_expected_prev[2] !== 1'bx ) && ( saida_p_prev[2] !== saida_p_expected_prev[2] )
		&& ((saida_p_expected_prev[2] !== last_saida_p_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_p[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_p_expected_prev);
		$display ("     Real value = %b", saida_p_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_p_exp[2] = saida_p_expected_prev[2];
	end
	if (
		( saida_p_expected_prev[3] !== 1'bx ) && ( saida_p_prev[3] !== saida_p_expected_prev[3] )
		&& ((saida_p_expected_prev[3] !== last_saida_p_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_p[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_p_expected_prev);
		$display ("     Real value = %b", saida_p_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_saida_p_exp[3] = saida_p_expected_prev[3];
	end
	if (
		( W_data_z_expected_prev[0] !== 1'bx ) && ( W_data_z_prev[0] !== W_data_z_expected_prev[0] )
		&& ((W_data_z_expected_prev[0] !== last_W_data_z_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[0] = W_data_z_expected_prev[0];
	end
	if (
		( W_data_z_expected_prev[1] !== 1'bx ) && ( W_data_z_prev[1] !== W_data_z_expected_prev[1] )
		&& ((W_data_z_expected_prev[1] !== last_W_data_z_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[1] = W_data_z_expected_prev[1];
	end
	if (
		( W_data_z_expected_prev[2] !== 1'bx ) && ( W_data_z_prev[2] !== W_data_z_expected_prev[2] )
		&& ((W_data_z_expected_prev[2] !== last_W_data_z_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[2] = W_data_z_expected_prev[2];
	end
	if (
		( W_data_z_expected_prev[3] !== 1'bx ) && ( W_data_z_prev[3] !== W_data_z_expected_prev[3] )
		&& ((W_data_z_expected_prev[3] !== last_W_data_z_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[3] = W_data_z_expected_prev[3];
	end
	if (
		( W_data_z_expected_prev[4] !== 1'bx ) && ( W_data_z_prev[4] !== W_data_z_expected_prev[4] )
		&& ((W_data_z_expected_prev[4] !== last_W_data_z_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[4] = W_data_z_expected_prev[4];
	end
	if (
		( W_data_z_expected_prev[5] !== 1'bx ) && ( W_data_z_prev[5] !== W_data_z_expected_prev[5] )
		&& ((W_data_z_expected_prev[5] !== last_W_data_z_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[5] = W_data_z_expected_prev[5];
	end
	if (
		( W_data_z_expected_prev[6] !== 1'bx ) && ( W_data_z_prev[6] !== W_data_z_expected_prev[6] )
		&& ((W_data_z_expected_prev[6] !== last_W_data_z_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[6] = W_data_z_expected_prev[6];
	end
	if (
		( W_data_z_expected_prev[7] !== 1'bx ) && ( W_data_z_prev[7] !== W_data_z_expected_prev[7] )
		&& ((W_data_z_expected_prev[7] !== last_W_data_z_exp[7]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[7] = W_data_z_expected_prev[7];
	end
	if (
		( W_data_z_expected_prev[8] !== 1'bx ) && ( W_data_z_prev[8] !== W_data_z_expected_prev[8] )
		&& ((W_data_z_expected_prev[8] !== last_W_data_z_exp[8]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[8] = W_data_z_expected_prev[8];
	end
	if (
		( W_data_z_expected_prev[9] !== 1'bx ) && ( W_data_z_prev[9] !== W_data_z_expected_prev[9] )
		&& ((W_data_z_expected_prev[9] !== last_W_data_z_exp[9]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[9] = W_data_z_expected_prev[9];
	end
	if (
		( W_data_z_expected_prev[10] !== 1'bx ) && ( W_data_z_prev[10] !== W_data_z_expected_prev[10] )
		&& ((W_data_z_expected_prev[10] !== last_W_data_z_exp[10]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[10] = W_data_z_expected_prev[10];
	end
	if (
		( W_data_z_expected_prev[11] !== 1'bx ) && ( W_data_z_prev[11] !== W_data_z_expected_prev[11] )
		&& ((W_data_z_expected_prev[11] !== last_W_data_z_exp[11]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[11] = W_data_z_expected_prev[11];
	end
	if (
		( W_data_z_expected_prev[12] !== 1'bx ) && ( W_data_z_prev[12] !== W_data_z_expected_prev[12] )
		&& ((W_data_z_expected_prev[12] !== last_W_data_z_exp[12]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[12] = W_data_z_expected_prev[12];
	end
	if (
		( W_data_z_expected_prev[13] !== 1'bx ) && ( W_data_z_prev[13] !== W_data_z_expected_prev[13] )
		&& ((W_data_z_expected_prev[13] !== last_W_data_z_exp[13]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[13] = W_data_z_expected_prev[13];
	end
	if (
		( W_data_z_expected_prev[14] !== 1'bx ) && ( W_data_z_prev[14] !== W_data_z_expected_prev[14] )
		&& ((W_data_z_expected_prev[14] !== last_W_data_z_exp[14]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[14] = W_data_z_expected_prev[14];
	end
	if (
		( W_data_z_expected_prev[15] !== 1'bx ) && ( W_data_z_prev[15] !== W_data_z_expected_prev[15] )
		&& ((W_data_z_expected_prev[15] !== last_W_data_z_exp[15]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_data_z[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_data_z_expected_prev);
		$display ("     Real value = %b", W_data_z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_W_data_z_exp[15] = W_data_z_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_principal;
// wires                                               
wire [15:0] addr_z;
wire alu_s0_z;
wire alu_s1_z;
wire [7:0] D_addr_z;
wire D_rd_z;
wire D_wr_z;
wire [15:0] data_I_z;
wire I_rd_z;
wire [3:0] nibble_IR_msb_out;
wire PC_clr_z;
wire PC_ld_z;
wire PC_up_z;
wire [15:0] R_data_z;
wire [3:0] RF_Rp_addr_z;
wire RF_Rp_rd_z;
wire RF_Rp_zero_z;
wire [3:0] RF_Rq_addr_z;
wire RF_Rq_rd_z;
wire RF_s0_z;
wire RF_s1_z;
wire [3:0] RF_W_addr_z;
wire [7:0] RF_W_data_z;
wire RF_W_wr_z;
wire [3:0] saida_p;
wire [15:0] W_data_z;

wire sampler;                             

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.addr_z(addr_z),
	.alu_s0_z(alu_s0_z),
	.alu_s1_z(alu_s1_z),
	.clk(clk),
	.D_addr_z(D_addr_z),
	.D_rd_z(D_rd_z),
	.D_wr_z(D_wr_z),
	.data_I_z(data_I_z),
	.I_rd_z(I_rd_z),
	.nibble_IR_msb_out(nibble_IR_msb_out),
	.PC_clr_z(PC_clr_z),
	.PC_ld_z(PC_ld_z),
	.PC_up_z(PC_up_z),
	.R_data_z(R_data_z),
	.RF_Rp_addr_z(RF_Rp_addr_z),
	.RF_Rp_rd_z(RF_Rp_rd_z),
	.RF_Rp_zero_z(RF_Rp_zero_z),
	.RF_Rq_addr_z(RF_Rq_addr_z),
	.RF_Rq_rd_z(RF_Rq_rd_z),
	.RF_s0_z(RF_s0_z),
	.RF_s1_z(RF_s1_z),
	.RF_W_addr_z(RF_W_addr_z),
	.RF_W_data_z(RF_W_data_z),
	.RF_W_wr_z(RF_W_wr_z),
	.rst_principal(rst_principal),
	.saida_p(saida_p),
	.W_data_z(W_data_z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// rst_principal
initial
begin
	rst_principal = 1'b1;
	rst_principal = #60000 1'b0;
end 

processador_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst_principal(rst_principal),
	.sampler_tx(sampler)
);

processador_vlg_check_tst tb_out(
	.addr_z(addr_z),
	.alu_s0_z(alu_s0_z),
	.alu_s1_z(alu_s1_z),
	.D_addr_z(D_addr_z),
	.D_rd_z(D_rd_z),
	.D_wr_z(D_wr_z),
	.data_I_z(data_I_z),
	.I_rd_z(I_rd_z),
	.nibble_IR_msb_out(nibble_IR_msb_out),
	.PC_clr_z(PC_clr_z),
	.PC_ld_z(PC_ld_z),
	.PC_up_z(PC_up_z),
	.R_data_z(R_data_z),
	.RF_Rp_addr_z(RF_Rp_addr_z),
	.RF_Rp_rd_z(RF_Rp_rd_z),
	.RF_Rp_zero_z(RF_Rp_zero_z),
	.RF_Rq_addr_z(RF_Rq_addr_z),
	.RF_Rq_rd_z(RF_Rq_rd_z),
	.RF_s0_z(RF_s0_z),
	.RF_s1_z(RF_s1_z),
	.RF_W_addr_z(RF_W_addr_z),
	.RF_W_data_z(RF_W_data_z),
	.RF_W_wr_z(RF_W_wr_z),
	.saida_p(saida_p),
	.W_data_z(W_data_z),
	.sampler_rx(sampler)
);
endmodule

