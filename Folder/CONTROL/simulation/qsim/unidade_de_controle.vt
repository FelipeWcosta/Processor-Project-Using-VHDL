// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2022 20:14:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    unidade_de_controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module unidade_de_controle_vlg_sample_tst(
	clk_uc,
	data_uc,
	RF_Rp_zero_uc,
	rst,
	sampler_tx
);
input  clk_uc;
input [15:0] data_uc;
input  RF_Rp_zero_uc;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk_uc or data_uc or RF_Rp_zero_uc or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module unidade_de_controle_vlg_check_tst (
	addr_uc,
	alu_s0_uc,
	alu_s1_uc,
	D_addr_uc,
	D_rd_uc,
	D_wr_uc,
	I_rd_uc,
	RF_Rp_addr_uc,
	RF_Rp_rd_uc,
	RF_Rq_addr_uc,
	RF_Rq_rd_uc,
	RF_s0_uc,
	RF_s1_uc,
	RF_W_addr_uc,
	RF_W_data_uc,
	RF_W_wr_uc,
	saida_uc,
	sampler_rx
);
input [15:0] addr_uc;
input  alu_s0_uc;
input  alu_s1_uc;
input [7:0] D_addr_uc;
input  D_rd_uc;
input  D_wr_uc;
input  I_rd_uc;
input [3:0] RF_Rp_addr_uc;
input  RF_Rp_rd_uc;
input [3:0] RF_Rq_addr_uc;
input  RF_Rq_rd_uc;
input  RF_s0_uc;
input  RF_s1_uc;
input [3:0] RF_W_addr_uc;
input [7:0] RF_W_data_uc;
input  RF_W_wr_uc;
input [3:0] saida_uc;
input sampler_rx;

reg [15:0] addr_uc_expected;
reg  alu_s0_uc_expected;
reg  alu_s1_uc_expected;
reg [7:0] D_addr_uc_expected;
reg  D_rd_uc_expected;
reg  D_wr_uc_expected;
reg  I_rd_uc_expected;
reg [3:0] RF_Rp_addr_uc_expected;
reg  RF_Rp_rd_uc_expected;
reg [3:0] RF_Rq_addr_uc_expected;
reg  RF_Rq_rd_uc_expected;
reg  RF_s0_uc_expected;
reg  RF_s1_uc_expected;
reg [3:0] RF_W_addr_uc_expected;
reg [7:0] RF_W_data_uc_expected;
reg  RF_W_wr_uc_expected;
reg [3:0] saida_uc_expected;

reg [15:0] addr_uc_prev;
reg  alu_s0_uc_prev;
reg  alu_s1_uc_prev;
reg [7:0] D_addr_uc_prev;
reg  D_rd_uc_prev;
reg  D_wr_uc_prev;
reg  I_rd_uc_prev;
reg [3:0] RF_Rp_addr_uc_prev;
reg  RF_Rp_rd_uc_prev;
reg [3:0] RF_Rq_addr_uc_prev;
reg  RF_Rq_rd_uc_prev;
reg  RF_s0_uc_prev;
reg  RF_s1_uc_prev;
reg [3:0] RF_W_addr_uc_prev;
reg [7:0] RF_W_data_uc_prev;
reg  RF_W_wr_uc_prev;
reg [3:0] saida_uc_prev;

reg [15:0] addr_uc_expected_prev;
reg  alu_s0_uc_expected_prev;
reg  alu_s1_uc_expected_prev;
reg [7:0] D_addr_uc_expected_prev;
reg  D_rd_uc_expected_prev;
reg  D_wr_uc_expected_prev;
reg  I_rd_uc_expected_prev;
reg [3:0] RF_Rp_addr_uc_expected_prev;
reg  RF_Rp_rd_uc_expected_prev;
reg [3:0] RF_Rq_addr_uc_expected_prev;
reg  RF_Rq_rd_uc_expected_prev;
reg  RF_s0_uc_expected_prev;
reg  RF_s1_uc_expected_prev;
reg [3:0] RF_W_addr_uc_expected_prev;
reg [7:0] RF_W_data_uc_expected_prev;
reg  RF_W_wr_uc_expected_prev;
reg [3:0] saida_uc_expected_prev;

reg [15:0] last_addr_uc_exp;
reg  last_alu_s0_uc_exp;
reg  last_alu_s1_uc_exp;
reg [7:0] last_D_addr_uc_exp;
reg  last_D_rd_uc_exp;
reg  last_D_wr_uc_exp;
reg  last_I_rd_uc_exp;
reg [3:0] last_RF_Rp_addr_uc_exp;
reg  last_RF_Rp_rd_uc_exp;
reg [3:0] last_RF_Rq_addr_uc_exp;
reg  last_RF_Rq_rd_uc_exp;
reg  last_RF_s0_uc_exp;
reg  last_RF_s1_uc_exp;
reg [3:0] last_RF_W_addr_uc_exp;
reg [7:0] last_RF_W_data_uc_exp;
reg  last_RF_W_wr_uc_exp;
reg [3:0] last_saida_uc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_uc_prev = addr_uc;
	alu_s0_uc_prev = alu_s0_uc;
	alu_s1_uc_prev = alu_s1_uc;
	D_addr_uc_prev = D_addr_uc;
	D_rd_uc_prev = D_rd_uc;
	D_wr_uc_prev = D_wr_uc;
	I_rd_uc_prev = I_rd_uc;
	RF_Rp_addr_uc_prev = RF_Rp_addr_uc;
	RF_Rp_rd_uc_prev = RF_Rp_rd_uc;
	RF_Rq_addr_uc_prev = RF_Rq_addr_uc;
	RF_Rq_rd_uc_prev = RF_Rq_rd_uc;
	RF_s0_uc_prev = RF_s0_uc;
	RF_s1_uc_prev = RF_s1_uc;
	RF_W_addr_uc_prev = RF_W_addr_uc;
	RF_W_data_uc_prev = RF_W_data_uc;
	RF_W_wr_uc_prev = RF_W_wr_uc;
	saida_uc_prev = saida_uc;
end

// update expected /o prevs

always @(trigger)
begin
	addr_uc_expected_prev = addr_uc_expected;
	alu_s0_uc_expected_prev = alu_s0_uc_expected;
	alu_s1_uc_expected_prev = alu_s1_uc_expected;
	D_addr_uc_expected_prev = D_addr_uc_expected;
	D_rd_uc_expected_prev = D_rd_uc_expected;
	D_wr_uc_expected_prev = D_wr_uc_expected;
	I_rd_uc_expected_prev = I_rd_uc_expected;
	RF_Rp_addr_uc_expected_prev = RF_Rp_addr_uc_expected;
	RF_Rp_rd_uc_expected_prev = RF_Rp_rd_uc_expected;
	RF_Rq_addr_uc_expected_prev = RF_Rq_addr_uc_expected;
	RF_Rq_rd_uc_expected_prev = RF_Rq_rd_uc_expected;
	RF_s0_uc_expected_prev = RF_s0_uc_expected;
	RF_s1_uc_expected_prev = RF_s1_uc_expected;
	RF_W_addr_uc_expected_prev = RF_W_addr_uc_expected;
	RF_W_data_uc_expected_prev = RF_W_data_uc_expected;
	RF_W_wr_uc_expected_prev = RF_W_wr_uc_expected;
	saida_uc_expected_prev = saida_uc_expected;
end


// expected addr_uc[ 15 ]
initial
begin
	addr_uc_expected[15] = 1'bX;
end 
// expected addr_uc[ 14 ]
initial
begin
	addr_uc_expected[14] = 1'bX;
end 
// expected addr_uc[ 13 ]
initial
begin
	addr_uc_expected[13] = 1'bX;
end 
// expected addr_uc[ 12 ]
initial
begin
	addr_uc_expected[12] = 1'bX;
end 
// expected addr_uc[ 11 ]
initial
begin
	addr_uc_expected[11] = 1'bX;
end 
// expected addr_uc[ 10 ]
initial
begin
	addr_uc_expected[10] = 1'bX;
end 
// expected addr_uc[ 9 ]
initial
begin
	addr_uc_expected[9] = 1'bX;
end 
// expected addr_uc[ 8 ]
initial
begin
	addr_uc_expected[8] = 1'bX;
end 
// expected addr_uc[ 7 ]
initial
begin
	addr_uc_expected[7] = 1'bX;
end 
// expected addr_uc[ 6 ]
initial
begin
	addr_uc_expected[6] = 1'bX;
end 
// expected addr_uc[ 5 ]
initial
begin
	addr_uc_expected[5] = 1'bX;
end 
// expected addr_uc[ 4 ]
initial
begin
	addr_uc_expected[4] = 1'bX;
end 
// expected addr_uc[ 3 ]
initial
begin
	addr_uc_expected[3] = 1'bX;
end 
// expected addr_uc[ 2 ]
initial
begin
	addr_uc_expected[2] = 1'bX;
end 
// expected addr_uc[ 1 ]
initial
begin
	addr_uc_expected[1] = 1'bX;
end 
// expected addr_uc[ 0 ]
initial
begin
	addr_uc_expected[0] = 1'bX;
end 

// expected alu_s0_uc
initial
begin
	alu_s0_uc_expected = 1'bX;
end 

// expected alu_s1_uc
initial
begin
	alu_s1_uc_expected = 1'bX;
end 
// expected D_addr_uc[ 7 ]
initial
begin
	D_addr_uc_expected[7] = 1'bX;
end 
// expected D_addr_uc[ 6 ]
initial
begin
	D_addr_uc_expected[6] = 1'bX;
end 
// expected D_addr_uc[ 5 ]
initial
begin
	D_addr_uc_expected[5] = 1'bX;
end 
// expected D_addr_uc[ 4 ]
initial
begin
	D_addr_uc_expected[4] = 1'bX;
end 
// expected D_addr_uc[ 3 ]
initial
begin
	D_addr_uc_expected[3] = 1'bX;
end 
// expected D_addr_uc[ 2 ]
initial
begin
	D_addr_uc_expected[2] = 1'bX;
end 
// expected D_addr_uc[ 1 ]
initial
begin
	D_addr_uc_expected[1] = 1'bX;
end 
// expected D_addr_uc[ 0 ]
initial
begin
	D_addr_uc_expected[0] = 1'bX;
end 

// expected D_rd_uc
initial
begin
	D_rd_uc_expected = 1'bX;
end 

// expected D_wr_uc
initial
begin
	D_wr_uc_expected = 1'bX;
end 

// expected I_rd_uc
initial
begin
	I_rd_uc_expected = 1'bX;
end 
// expected RF_Rp_addr_uc[ 3 ]
initial
begin
	RF_Rp_addr_uc_expected[3] = 1'bX;
end 
// expected RF_Rp_addr_uc[ 2 ]
initial
begin
	RF_Rp_addr_uc_expected[2] = 1'bX;
end 
// expected RF_Rp_addr_uc[ 1 ]
initial
begin
	RF_Rp_addr_uc_expected[1] = 1'bX;
end 
// expected RF_Rp_addr_uc[ 0 ]
initial
begin
	RF_Rp_addr_uc_expected[0] = 1'bX;
end 

// expected RF_Rp_rd_uc
initial
begin
	RF_Rp_rd_uc_expected = 1'bX;
end 
// expected RF_Rq_addr_uc[ 3 ]
initial
begin
	RF_Rq_addr_uc_expected[3] = 1'bX;
end 
// expected RF_Rq_addr_uc[ 2 ]
initial
begin
	RF_Rq_addr_uc_expected[2] = 1'bX;
end 
// expected RF_Rq_addr_uc[ 1 ]
initial
begin
	RF_Rq_addr_uc_expected[1] = 1'bX;
end 
// expected RF_Rq_addr_uc[ 0 ]
initial
begin
	RF_Rq_addr_uc_expected[0] = 1'bX;
end 

// expected RF_Rq_rd_uc
initial
begin
	RF_Rq_rd_uc_expected = 1'bX;
end 

// expected RF_s0_uc
initial
begin
	RF_s0_uc_expected = 1'bX;
end 

// expected RF_s1_uc
initial
begin
	RF_s1_uc_expected = 1'bX;
end 
// expected RF_W_addr_uc[ 3 ]
initial
begin
	RF_W_addr_uc_expected[3] = 1'bX;
end 
// expected RF_W_addr_uc[ 2 ]
initial
begin
	RF_W_addr_uc_expected[2] = 1'bX;
end 
// expected RF_W_addr_uc[ 1 ]
initial
begin
	RF_W_addr_uc_expected[1] = 1'bX;
end 
// expected RF_W_addr_uc[ 0 ]
initial
begin
	RF_W_addr_uc_expected[0] = 1'bX;
end 
// expected RF_W_data_uc[ 7 ]
initial
begin
	RF_W_data_uc_expected[7] = 1'bX;
end 
// expected RF_W_data_uc[ 6 ]
initial
begin
	RF_W_data_uc_expected[6] = 1'bX;
end 
// expected RF_W_data_uc[ 5 ]
initial
begin
	RF_W_data_uc_expected[5] = 1'bX;
end 
// expected RF_W_data_uc[ 4 ]
initial
begin
	RF_W_data_uc_expected[4] = 1'bX;
end 
// expected RF_W_data_uc[ 3 ]
initial
begin
	RF_W_data_uc_expected[3] = 1'bX;
end 
// expected RF_W_data_uc[ 2 ]
initial
begin
	RF_W_data_uc_expected[2] = 1'bX;
end 
// expected RF_W_data_uc[ 1 ]
initial
begin
	RF_W_data_uc_expected[1] = 1'bX;
end 
// expected RF_W_data_uc[ 0 ]
initial
begin
	RF_W_data_uc_expected[0] = 1'bX;
end 

// expected RF_W_wr_uc
initial
begin
	RF_W_wr_uc_expected = 1'bX;
end 
// expected saida_uc[ 3 ]
initial
begin
	saida_uc_expected[3] = 1'bX;
end 
// expected saida_uc[ 2 ]
initial
begin
	saida_uc_expected[2] = 1'bX;
end 
// expected saida_uc[ 1 ]
initial
begin
	saida_uc_expected[1] = 1'bX;
end 
// expected saida_uc[ 0 ]
initial
begin
	saida_uc_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_uc_expected or addr_uc or alu_s0_uc_expected or alu_s0_uc or alu_s1_uc_expected or alu_s1_uc or D_addr_uc_expected or D_addr_uc or D_rd_uc_expected or D_rd_uc or D_wr_uc_expected or D_wr_uc or I_rd_uc_expected or I_rd_uc or RF_Rp_addr_uc_expected or RF_Rp_addr_uc or RF_Rp_rd_uc_expected or RF_Rp_rd_uc or RF_Rq_addr_uc_expected or RF_Rq_addr_uc or RF_Rq_rd_uc_expected or RF_Rq_rd_uc or RF_s0_uc_expected or RF_s0_uc or RF_s1_uc_expected or RF_s1_uc or RF_W_addr_uc_expected or RF_W_addr_uc or RF_W_data_uc_expected or RF_W_data_uc or RF_W_wr_uc_expected or RF_W_wr_uc or saida_uc_expected or saida_uc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr_uc = %b | expected alu_s0_uc = %b | expected alu_s1_uc = %b | expected D_addr_uc = %b | expected D_rd_uc = %b | expected D_wr_uc = %b | expected I_rd_uc = %b | expected RF_Rp_addr_uc = %b | expected RF_Rp_rd_uc = %b | expected RF_Rq_addr_uc = %b | expected RF_Rq_rd_uc = %b | expected RF_s0_uc = %b | expected RF_s1_uc = %b | expected RF_W_addr_uc = %b | expected RF_W_data_uc = %b | expected RF_W_wr_uc = %b | expected saida_uc = %b | ",addr_uc_expected_prev,alu_s0_uc_expected_prev,alu_s1_uc_expected_prev,D_addr_uc_expected_prev,D_rd_uc_expected_prev,D_wr_uc_expected_prev,I_rd_uc_expected_prev,RF_Rp_addr_uc_expected_prev,RF_Rp_rd_uc_expected_prev,RF_Rq_addr_uc_expected_prev,RF_Rq_rd_uc_expected_prev,RF_s0_uc_expected_prev,RF_s1_uc_expected_prev,RF_W_addr_uc_expected_prev,RF_W_data_uc_expected_prev,RF_W_wr_uc_expected_prev,saida_uc_expected_prev);
	$display("| real addr_uc = %b | real alu_s0_uc = %b | real alu_s1_uc = %b | real D_addr_uc = %b | real D_rd_uc = %b | real D_wr_uc = %b | real I_rd_uc = %b | real RF_Rp_addr_uc = %b | real RF_Rp_rd_uc = %b | real RF_Rq_addr_uc = %b | real RF_Rq_rd_uc = %b | real RF_s0_uc = %b | real RF_s1_uc = %b | real RF_W_addr_uc = %b | real RF_W_data_uc = %b | real RF_W_wr_uc = %b | real saida_uc = %b | ",addr_uc_prev,alu_s0_uc_prev,alu_s1_uc_prev,D_addr_uc_prev,D_rd_uc_prev,D_wr_uc_prev,I_rd_uc_prev,RF_Rp_addr_uc_prev,RF_Rp_rd_uc_prev,RF_Rq_addr_uc_prev,RF_Rq_rd_uc_prev,RF_s0_uc_prev,RF_s1_uc_prev,RF_W_addr_uc_prev,RF_W_data_uc_prev,RF_W_wr_uc_prev,saida_uc_prev);
`endif
	if (
		( addr_uc_expected_prev[0] !== 1'bx ) && ( addr_uc_prev[0] !== addr_uc_expected_prev[0] )
		&& ((addr_uc_expected_prev[0] !== last_addr_uc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[0] = addr_uc_expected_prev[0];
	end
	if (
		( addr_uc_expected_prev[1] !== 1'bx ) && ( addr_uc_prev[1] !== addr_uc_expected_prev[1] )
		&& ((addr_uc_expected_prev[1] !== last_addr_uc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[1] = addr_uc_expected_prev[1];
	end
	if (
		( addr_uc_expected_prev[2] !== 1'bx ) && ( addr_uc_prev[2] !== addr_uc_expected_prev[2] )
		&& ((addr_uc_expected_prev[2] !== last_addr_uc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[2] = addr_uc_expected_prev[2];
	end
	if (
		( addr_uc_expected_prev[3] !== 1'bx ) && ( addr_uc_prev[3] !== addr_uc_expected_prev[3] )
		&& ((addr_uc_expected_prev[3] !== last_addr_uc_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[3] = addr_uc_expected_prev[3];
	end
	if (
		( addr_uc_expected_prev[4] !== 1'bx ) && ( addr_uc_prev[4] !== addr_uc_expected_prev[4] )
		&& ((addr_uc_expected_prev[4] !== last_addr_uc_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[4] = addr_uc_expected_prev[4];
	end
	if (
		( addr_uc_expected_prev[5] !== 1'bx ) && ( addr_uc_prev[5] !== addr_uc_expected_prev[5] )
		&& ((addr_uc_expected_prev[5] !== last_addr_uc_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[5] = addr_uc_expected_prev[5];
	end
	if (
		( addr_uc_expected_prev[6] !== 1'bx ) && ( addr_uc_prev[6] !== addr_uc_expected_prev[6] )
		&& ((addr_uc_expected_prev[6] !== last_addr_uc_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[6] = addr_uc_expected_prev[6];
	end
	if (
		( addr_uc_expected_prev[7] !== 1'bx ) && ( addr_uc_prev[7] !== addr_uc_expected_prev[7] )
		&& ((addr_uc_expected_prev[7] !== last_addr_uc_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[7] = addr_uc_expected_prev[7];
	end
	if (
		( addr_uc_expected_prev[8] !== 1'bx ) && ( addr_uc_prev[8] !== addr_uc_expected_prev[8] )
		&& ((addr_uc_expected_prev[8] !== last_addr_uc_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[8] = addr_uc_expected_prev[8];
	end
	if (
		( addr_uc_expected_prev[9] !== 1'bx ) && ( addr_uc_prev[9] !== addr_uc_expected_prev[9] )
		&& ((addr_uc_expected_prev[9] !== last_addr_uc_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[9] = addr_uc_expected_prev[9];
	end
	if (
		( addr_uc_expected_prev[10] !== 1'bx ) && ( addr_uc_prev[10] !== addr_uc_expected_prev[10] )
		&& ((addr_uc_expected_prev[10] !== last_addr_uc_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[10] = addr_uc_expected_prev[10];
	end
	if (
		( addr_uc_expected_prev[11] !== 1'bx ) && ( addr_uc_prev[11] !== addr_uc_expected_prev[11] )
		&& ((addr_uc_expected_prev[11] !== last_addr_uc_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[11] = addr_uc_expected_prev[11];
	end
	if (
		( addr_uc_expected_prev[12] !== 1'bx ) && ( addr_uc_prev[12] !== addr_uc_expected_prev[12] )
		&& ((addr_uc_expected_prev[12] !== last_addr_uc_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[12] = addr_uc_expected_prev[12];
	end
	if (
		( addr_uc_expected_prev[13] !== 1'bx ) && ( addr_uc_prev[13] !== addr_uc_expected_prev[13] )
		&& ((addr_uc_expected_prev[13] !== last_addr_uc_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[13] = addr_uc_expected_prev[13];
	end
	if (
		( addr_uc_expected_prev[14] !== 1'bx ) && ( addr_uc_prev[14] !== addr_uc_expected_prev[14] )
		&& ((addr_uc_expected_prev[14] !== last_addr_uc_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[14] = addr_uc_expected_prev[14];
	end
	if (
		( addr_uc_expected_prev[15] !== 1'bx ) && ( addr_uc_prev[15] !== addr_uc_expected_prev[15] )
		&& ((addr_uc_expected_prev[15] !== last_addr_uc_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr_uc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_uc_expected_prev);
		$display ("     Real value = %b", addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_uc_exp[15] = addr_uc_expected_prev[15];
	end
	if (
		( alu_s0_uc_expected_prev !== 1'bx ) && ( alu_s0_uc_prev !== alu_s0_uc_expected_prev )
		&& ((alu_s0_uc_expected_prev !== last_alu_s0_uc_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s0_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s0_uc_expected_prev);
		$display ("     Real value = %b", alu_s0_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_s0_uc_exp = alu_s0_uc_expected_prev;
	end
	if (
		( alu_s1_uc_expected_prev !== 1'bx ) && ( alu_s1_uc_prev !== alu_s1_uc_expected_prev )
		&& ((alu_s1_uc_expected_prev !== last_alu_s1_uc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s1_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s1_uc_expected_prev);
		$display ("     Real value = %b", alu_s1_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_s1_uc_exp = alu_s1_uc_expected_prev;
	end
	if (
		( D_addr_uc_expected_prev[0] !== 1'bx ) && ( D_addr_uc_prev[0] !== D_addr_uc_expected_prev[0] )
		&& ((D_addr_uc_expected_prev[0] !== last_D_addr_uc_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[0] = D_addr_uc_expected_prev[0];
	end
	if (
		( D_addr_uc_expected_prev[1] !== 1'bx ) && ( D_addr_uc_prev[1] !== D_addr_uc_expected_prev[1] )
		&& ((D_addr_uc_expected_prev[1] !== last_D_addr_uc_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[1] = D_addr_uc_expected_prev[1];
	end
	if (
		( D_addr_uc_expected_prev[2] !== 1'bx ) && ( D_addr_uc_prev[2] !== D_addr_uc_expected_prev[2] )
		&& ((D_addr_uc_expected_prev[2] !== last_D_addr_uc_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[2] = D_addr_uc_expected_prev[2];
	end
	if (
		( D_addr_uc_expected_prev[3] !== 1'bx ) && ( D_addr_uc_prev[3] !== D_addr_uc_expected_prev[3] )
		&& ((D_addr_uc_expected_prev[3] !== last_D_addr_uc_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[3] = D_addr_uc_expected_prev[3];
	end
	if (
		( D_addr_uc_expected_prev[4] !== 1'bx ) && ( D_addr_uc_prev[4] !== D_addr_uc_expected_prev[4] )
		&& ((D_addr_uc_expected_prev[4] !== last_D_addr_uc_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[4] = D_addr_uc_expected_prev[4];
	end
	if (
		( D_addr_uc_expected_prev[5] !== 1'bx ) && ( D_addr_uc_prev[5] !== D_addr_uc_expected_prev[5] )
		&& ((D_addr_uc_expected_prev[5] !== last_D_addr_uc_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[5] = D_addr_uc_expected_prev[5];
	end
	if (
		( D_addr_uc_expected_prev[6] !== 1'bx ) && ( D_addr_uc_prev[6] !== D_addr_uc_expected_prev[6] )
		&& ((D_addr_uc_expected_prev[6] !== last_D_addr_uc_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[6] = D_addr_uc_expected_prev[6];
	end
	if (
		( D_addr_uc_expected_prev[7] !== 1'bx ) && ( D_addr_uc_prev[7] !== D_addr_uc_expected_prev[7] )
		&& ((D_addr_uc_expected_prev[7] !== last_D_addr_uc_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr_uc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_uc_expected_prev);
		$display ("     Real value = %b", D_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_addr_uc_exp[7] = D_addr_uc_expected_prev[7];
	end
	if (
		( D_rd_uc_expected_prev !== 1'bx ) && ( D_rd_uc_prev !== D_rd_uc_expected_prev )
		&& ((D_rd_uc_expected_prev !== last_D_rd_uc_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rd_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rd_uc_expected_prev);
		$display ("     Real value = %b", D_rd_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_rd_uc_exp = D_rd_uc_expected_prev;
	end
	if (
		( D_wr_uc_expected_prev !== 1'bx ) && ( D_wr_uc_prev !== D_wr_uc_expected_prev )
		&& ((D_wr_uc_expected_prev !== last_D_wr_uc_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_wr_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_wr_uc_expected_prev);
		$display ("     Real value = %b", D_wr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_wr_uc_exp = D_wr_uc_expected_prev;
	end
	if (
		( I_rd_uc_expected_prev !== 1'bx ) && ( I_rd_uc_prev !== I_rd_uc_expected_prev )
		&& ((I_rd_uc_expected_prev !== last_I_rd_uc_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_uc_expected_prev);
		$display ("     Real value = %b", I_rd_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_I_rd_uc_exp = I_rd_uc_expected_prev;
	end
	if (
		( RF_Rp_addr_uc_expected_prev[0] !== 1'bx ) && ( RF_Rp_addr_uc_prev[0] !== RF_Rp_addr_uc_expected_prev[0] )
		&& ((RF_Rp_addr_uc_expected_prev[0] !== last_RF_Rp_addr_uc_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_uc_exp[0] = RF_Rp_addr_uc_expected_prev[0];
	end
	if (
		( RF_Rp_addr_uc_expected_prev[1] !== 1'bx ) && ( RF_Rp_addr_uc_prev[1] !== RF_Rp_addr_uc_expected_prev[1] )
		&& ((RF_Rp_addr_uc_expected_prev[1] !== last_RF_Rp_addr_uc_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_uc_exp[1] = RF_Rp_addr_uc_expected_prev[1];
	end
	if (
		( RF_Rp_addr_uc_expected_prev[2] !== 1'bx ) && ( RF_Rp_addr_uc_prev[2] !== RF_Rp_addr_uc_expected_prev[2] )
		&& ((RF_Rp_addr_uc_expected_prev[2] !== last_RF_Rp_addr_uc_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_uc_exp[2] = RF_Rp_addr_uc_expected_prev[2];
	end
	if (
		( RF_Rp_addr_uc_expected_prev[3] !== 1'bx ) && ( RF_Rp_addr_uc_prev[3] !== RF_Rp_addr_uc_expected_prev[3] )
		&& ((RF_Rp_addr_uc_expected_prev[3] !== last_RF_Rp_addr_uc_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_uc_exp[3] = RF_Rp_addr_uc_expected_prev[3];
	end
	if (
		( RF_Rp_rd_uc_expected_prev !== 1'bx ) && ( RF_Rp_rd_uc_prev !== RF_Rp_rd_uc_expected_prev )
		&& ((RF_Rp_rd_uc_expected_prev !== last_RF_Rp_rd_uc_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_rd_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_rd_uc_expected_prev);
		$display ("     Real value = %b", RF_Rp_rd_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_Rp_rd_uc_exp = RF_Rp_rd_uc_expected_prev;
	end
	if (
		( RF_Rq_addr_uc_expected_prev[0] !== 1'bx ) && ( RF_Rq_addr_uc_prev[0] !== RF_Rq_addr_uc_expected_prev[0] )
		&& ((RF_Rq_addr_uc_expected_prev[0] !== last_RF_Rq_addr_uc_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_uc_exp[0] = RF_Rq_addr_uc_expected_prev[0];
	end
	if (
		( RF_Rq_addr_uc_expected_prev[1] !== 1'bx ) && ( RF_Rq_addr_uc_prev[1] !== RF_Rq_addr_uc_expected_prev[1] )
		&& ((RF_Rq_addr_uc_expected_prev[1] !== last_RF_Rq_addr_uc_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_uc_exp[1] = RF_Rq_addr_uc_expected_prev[1];
	end
	if (
		( RF_Rq_addr_uc_expected_prev[2] !== 1'bx ) && ( RF_Rq_addr_uc_prev[2] !== RF_Rq_addr_uc_expected_prev[2] )
		&& ((RF_Rq_addr_uc_expected_prev[2] !== last_RF_Rq_addr_uc_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_uc_exp[2] = RF_Rq_addr_uc_expected_prev[2];
	end
	if (
		( RF_Rq_addr_uc_expected_prev[3] !== 1'bx ) && ( RF_Rq_addr_uc_prev[3] !== RF_Rq_addr_uc_expected_prev[3] )
		&& ((RF_Rq_addr_uc_expected_prev[3] !== last_RF_Rq_addr_uc_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_uc_exp[3] = RF_Rq_addr_uc_expected_prev[3];
	end
	if (
		( RF_Rq_rd_uc_expected_prev !== 1'bx ) && ( RF_Rq_rd_uc_prev !== RF_Rq_rd_uc_expected_prev )
		&& ((RF_Rq_rd_uc_expected_prev !== last_RF_Rq_rd_uc_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_rd_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_rd_uc_expected_prev);
		$display ("     Real value = %b", RF_Rq_rd_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RF_Rq_rd_uc_exp = RF_Rq_rd_uc_expected_prev;
	end
	if (
		( RF_s0_uc_expected_prev !== 1'bx ) && ( RF_s0_uc_prev !== RF_s0_uc_expected_prev )
		&& ((RF_s0_uc_expected_prev !== last_RF_s0_uc_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s0_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s0_uc_expected_prev);
		$display ("     Real value = %b", RF_s0_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_s0_uc_exp = RF_s0_uc_expected_prev;
	end
	if (
		( RF_s1_uc_expected_prev !== 1'bx ) && ( RF_s1_uc_prev !== RF_s1_uc_expected_prev )
		&& ((RF_s1_uc_expected_prev !== last_RF_s1_uc_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s1_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s1_uc_expected_prev);
		$display ("     Real value = %b", RF_s1_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_s1_uc_exp = RF_s1_uc_expected_prev;
	end
	if (
		( RF_W_addr_uc_expected_prev[0] !== 1'bx ) && ( RF_W_addr_uc_prev[0] !== RF_W_addr_uc_expected_prev[0] )
		&& ((RF_W_addr_uc_expected_prev[0] !== last_RF_W_addr_uc_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_W_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_addr_uc_exp[0] = RF_W_addr_uc_expected_prev[0];
	end
	if (
		( RF_W_addr_uc_expected_prev[1] !== 1'bx ) && ( RF_W_addr_uc_prev[1] !== RF_W_addr_uc_expected_prev[1] )
		&& ((RF_W_addr_uc_expected_prev[1] !== last_RF_W_addr_uc_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_W_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_addr_uc_exp[1] = RF_W_addr_uc_expected_prev[1];
	end
	if (
		( RF_W_addr_uc_expected_prev[2] !== 1'bx ) && ( RF_W_addr_uc_prev[2] !== RF_W_addr_uc_expected_prev[2] )
		&& ((RF_W_addr_uc_expected_prev[2] !== last_RF_W_addr_uc_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_W_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_addr_uc_exp[2] = RF_W_addr_uc_expected_prev[2];
	end
	if (
		( RF_W_addr_uc_expected_prev[3] !== 1'bx ) && ( RF_W_addr_uc_prev[3] !== RF_W_addr_uc_expected_prev[3] )
		&& ((RF_W_addr_uc_expected_prev[3] !== last_RF_W_addr_uc_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_uc_expected_prev);
		$display ("     Real value = %b", RF_W_addr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_addr_uc_exp[3] = RF_W_addr_uc_expected_prev[3];
	end
	if (
		( RF_W_data_uc_expected_prev[0] !== 1'bx ) && ( RF_W_data_uc_prev[0] !== RF_W_data_uc_expected_prev[0] )
		&& ((RF_W_data_uc_expected_prev[0] !== last_RF_W_data_uc_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[0] = RF_W_data_uc_expected_prev[0];
	end
	if (
		( RF_W_data_uc_expected_prev[1] !== 1'bx ) && ( RF_W_data_uc_prev[1] !== RF_W_data_uc_expected_prev[1] )
		&& ((RF_W_data_uc_expected_prev[1] !== last_RF_W_data_uc_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[1] = RF_W_data_uc_expected_prev[1];
	end
	if (
		( RF_W_data_uc_expected_prev[2] !== 1'bx ) && ( RF_W_data_uc_prev[2] !== RF_W_data_uc_expected_prev[2] )
		&& ((RF_W_data_uc_expected_prev[2] !== last_RF_W_data_uc_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[2] = RF_W_data_uc_expected_prev[2];
	end
	if (
		( RF_W_data_uc_expected_prev[3] !== 1'bx ) && ( RF_W_data_uc_prev[3] !== RF_W_data_uc_expected_prev[3] )
		&& ((RF_W_data_uc_expected_prev[3] !== last_RF_W_data_uc_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[3] = RF_W_data_uc_expected_prev[3];
	end
	if (
		( RF_W_data_uc_expected_prev[4] !== 1'bx ) && ( RF_W_data_uc_prev[4] !== RF_W_data_uc_expected_prev[4] )
		&& ((RF_W_data_uc_expected_prev[4] !== last_RF_W_data_uc_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[4] = RF_W_data_uc_expected_prev[4];
	end
	if (
		( RF_W_data_uc_expected_prev[5] !== 1'bx ) && ( RF_W_data_uc_prev[5] !== RF_W_data_uc_expected_prev[5] )
		&& ((RF_W_data_uc_expected_prev[5] !== last_RF_W_data_uc_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[5] = RF_W_data_uc_expected_prev[5];
	end
	if (
		( RF_W_data_uc_expected_prev[6] !== 1'bx ) && ( RF_W_data_uc_prev[6] !== RF_W_data_uc_expected_prev[6] )
		&& ((RF_W_data_uc_expected_prev[6] !== last_RF_W_data_uc_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[6] = RF_W_data_uc_expected_prev[6];
	end
	if (
		( RF_W_data_uc_expected_prev[7] !== 1'bx ) && ( RF_W_data_uc_prev[7] !== RF_W_data_uc_expected_prev[7] )
		&& ((RF_W_data_uc_expected_prev[7] !== last_RF_W_data_uc_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_data_uc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_data_uc_expected_prev);
		$display ("     Real value = %b", RF_W_data_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_data_uc_exp[7] = RF_W_data_uc_expected_prev[7];
	end
	if (
		( RF_W_wr_uc_expected_prev !== 1'bx ) && ( RF_W_wr_uc_prev !== RF_W_wr_uc_expected_prev )
		&& ((RF_W_wr_uc_expected_prev !== last_RF_W_wr_uc_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_wr_uc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_wr_uc_expected_prev);
		$display ("     Real value = %b", RF_W_wr_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_W_wr_uc_exp = RF_W_wr_uc_expected_prev;
	end
	if (
		( saida_uc_expected_prev[0] !== 1'bx ) && ( saida_uc_prev[0] !== saida_uc_expected_prev[0] )
		&& ((saida_uc_expected_prev[0] !== last_saida_uc_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_uc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_uc_expected_prev);
		$display ("     Real value = %b", saida_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_saida_uc_exp[0] = saida_uc_expected_prev[0];
	end
	if (
		( saida_uc_expected_prev[1] !== 1'bx ) && ( saida_uc_prev[1] !== saida_uc_expected_prev[1] )
		&& ((saida_uc_expected_prev[1] !== last_saida_uc_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_uc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_uc_expected_prev);
		$display ("     Real value = %b", saida_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_saida_uc_exp[1] = saida_uc_expected_prev[1];
	end
	if (
		( saida_uc_expected_prev[2] !== 1'bx ) && ( saida_uc_prev[2] !== saida_uc_expected_prev[2] )
		&& ((saida_uc_expected_prev[2] !== last_saida_uc_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_uc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_uc_expected_prev);
		$display ("     Real value = %b", saida_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_saida_uc_exp[2] = saida_uc_expected_prev[2];
	end
	if (
		( saida_uc_expected_prev[3] !== 1'bx ) && ( saida_uc_prev[3] !== saida_uc_expected_prev[3] )
		&& ((saida_uc_expected_prev[3] !== last_saida_uc_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_uc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_uc_expected_prev);
		$display ("     Real value = %b", saida_uc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_saida_uc_exp[3] = saida_uc_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module unidade_de_controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_uc;
reg [15:0] data_uc;
reg RF_Rp_zero_uc;
reg rst;
// wires                                               
wire [15:0] addr_uc;
wire alu_s0_uc;
wire alu_s1_uc;
wire [7:0] D_addr_uc;
wire D_rd_uc;
wire D_wr_uc;
wire I_rd_uc;
wire [3:0] RF_Rp_addr_uc;
wire RF_Rp_rd_uc;
wire [3:0] RF_Rq_addr_uc;
wire RF_Rq_rd_uc;
wire RF_s0_uc;
wire RF_s1_uc;
wire [3:0] RF_W_addr_uc;
wire [7:0] RF_W_data_uc;
wire RF_W_wr_uc;
wire [3:0] saida_uc;

wire sampler;                             

// assign statements (if any)                          
unidade_de_controle i1 (
// port map - connection between master ports and signals/registers   
	.addr_uc(addr_uc),
	.alu_s0_uc(alu_s0_uc),
	.alu_s1_uc(alu_s1_uc),
	.clk_uc(clk_uc),
	.D_addr_uc(D_addr_uc),
	.D_rd_uc(D_rd_uc),
	.D_wr_uc(D_wr_uc),
	.data_uc(data_uc),
	.I_rd_uc(I_rd_uc),
	.RF_Rp_addr_uc(RF_Rp_addr_uc),
	.RF_Rp_rd_uc(RF_Rp_rd_uc),
	.RF_Rp_zero_uc(RF_Rp_zero_uc),
	.RF_Rq_addr_uc(RF_Rq_addr_uc),
	.RF_Rq_rd_uc(RF_Rq_rd_uc),
	.RF_s0_uc(RF_s0_uc),
	.RF_s1_uc(RF_s1_uc),
	.RF_W_addr_uc(RF_W_addr_uc),
	.RF_W_data_uc(RF_W_data_uc),
	.RF_W_wr_uc(RF_W_wr_uc),
	.rst(rst),
	.saida_uc(saida_uc)
);

// clk_uc
always
begin
	clk_uc = 1'b0;
	clk_uc = #20000 1'b1;
	#20000;
end 
// data_uc[ 15 ]
initial
begin
	data_uc[15] = 1'b0;
end 
// data_uc[ 14 ]
initial
begin
	data_uc[14] = 1'b0;
end 
// data_uc[ 13 ]
initial
begin
	data_uc[13] = 1'b0;
end 
// data_uc[ 12 ]
initial
begin
	data_uc[12] = 1'b0;
	data_uc[12] = #520000 1'b1;
end 
// data_uc[ 11 ]
initial
begin
	data_uc[11] = 1'b0;
end 
// data_uc[ 10 ]
initial
begin
	data_uc[10] = 1'b0;
end 
// data_uc[ 9 ]
initial
begin
	data_uc[9] = 1'b0;
end 
// data_uc[ 8 ]
initial
begin
	data_uc[8] = 1'b0;
end 
// data_uc[ 7 ]
initial
begin
	data_uc[7] = 1'b0;
end 
// data_uc[ 6 ]
initial
begin
	data_uc[6] = 1'b1;
end 
// data_uc[ 5 ]
initial
begin
	data_uc[5] = 1'b1;
end 
// data_uc[ 4 ]
initial
begin
	data_uc[4] = 1'b1;
end 
// data_uc[ 3 ]
initial
begin
	data_uc[3] = 1'b1;
end 
// data_uc[ 2 ]
initial
begin
	data_uc[2] = 1'b0;
end 
// data_uc[ 1 ]
initial
begin
	data_uc[1] = 1'b0;
end 
// data_uc[ 0 ]
initial
begin
	data_uc[0] = 1'b1;
end 

// RF_Rp_zero_uc
initial
begin
	RF_Rp_zero_uc = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #50000 1'b0;
end 

unidade_de_controle_vlg_sample_tst tb_sample (
	.clk_uc(clk_uc),
	.data_uc(data_uc),
	.RF_Rp_zero_uc(RF_Rp_zero_uc),
	.rst(rst),
	.sampler_tx(sampler)
);

unidade_de_controle_vlg_check_tst tb_out(
	.addr_uc(addr_uc),
	.alu_s0_uc(alu_s0_uc),
	.alu_s1_uc(alu_s1_uc),
	.D_addr_uc(D_addr_uc),
	.D_rd_uc(D_rd_uc),
	.D_wr_uc(D_wr_uc),
	.I_rd_uc(I_rd_uc),
	.RF_Rp_addr_uc(RF_Rp_addr_uc),
	.RF_Rp_rd_uc(RF_Rp_rd_uc),
	.RF_Rq_addr_uc(RF_Rq_addr_uc),
	.RF_Rq_rd_uc(RF_Rq_rd_uc),
	.RF_s0_uc(RF_s0_uc),
	.RF_s1_uc(RF_s1_uc),
	.RF_W_addr_uc(RF_W_addr_uc),
	.RF_W_data_uc(RF_W_data_uc),
	.RF_W_wr_uc(RF_W_wr_uc),
	.saida_uc(saida_uc),
	.sampler_rx(sampler)
);
endmodule

