// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2022 12:02:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM_vlg_sample_tst(
	clk,
	d,
	RF_Rp_zero,
	rst,
	sampler_tx
);
input  clk;
input [15:0] d;
input  RF_Rp_zero;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or d or RF_Rp_zero or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FSM_vlg_check_tst (
	alu_s0,
	alu_s1,
	D_addr,
	D_rd,
	D_wr,
	I_rd,
	IR_ld,
	PC_clr,
	PC_inc,
	PC_ld,
	RF_Rp_addr,
	RF_Rp_rd,
	RF_Rq_addr,
	RF_Rq_rd,
	RF_s0,
	RF_s1,
	RF_w_addr,
	RF_W_wr,
	saida,
	sampler_rx
);
input  alu_s0;
input  alu_s1;
input [7:0] D_addr;
input  D_rd;
input  D_wr;
input  I_rd;
input  IR_ld;
input  PC_clr;
input  PC_inc;
input  PC_ld;
input [3:0] RF_Rp_addr;
input  RF_Rp_rd;
input [3:0] RF_Rq_addr;
input  RF_Rq_rd;
input  RF_s0;
input  RF_s1;
input [3:0] RF_w_addr;
input  RF_W_wr;
input [3:0] saida;
input sampler_rx;

reg  alu_s0_expected;
reg  alu_s1_expected;
reg [7:0] D_addr_expected;
reg  D_rd_expected;
reg  D_wr_expected;
reg  I_rd_expected;
reg  IR_ld_expected;
reg  PC_clr_expected;
reg  PC_inc_expected;
reg  PC_ld_expected;
reg [3:0] RF_Rp_addr_expected;
reg  RF_Rp_rd_expected;
reg [3:0] RF_Rq_addr_expected;
reg  RF_Rq_rd_expected;
reg  RF_s0_expected;
reg  RF_s1_expected;
reg [3:0] RF_w_addr_expected;
reg  RF_W_wr_expected;
reg [3:0] saida_expected;

reg  alu_s0_prev;
reg  alu_s1_prev;
reg [7:0] D_addr_prev;
reg  D_rd_prev;
reg  D_wr_prev;
reg  I_rd_prev;
reg  IR_ld_prev;
reg  PC_clr_prev;
reg  PC_inc_prev;
reg  PC_ld_prev;
reg [3:0] RF_Rp_addr_prev;
reg  RF_Rp_rd_prev;
reg [3:0] RF_Rq_addr_prev;
reg  RF_Rq_rd_prev;
reg  RF_s0_prev;
reg  RF_s1_prev;
reg [3:0] RF_w_addr_prev;
reg  RF_W_wr_prev;
reg [3:0] saida_prev;

reg  alu_s0_expected_prev;
reg  alu_s1_expected_prev;
reg [7:0] D_addr_expected_prev;
reg  D_rd_expected_prev;
reg  D_wr_expected_prev;
reg  I_rd_expected_prev;
reg  IR_ld_expected_prev;
reg  PC_clr_expected_prev;
reg  PC_inc_expected_prev;
reg  PC_ld_expected_prev;
reg [3:0] RF_Rp_addr_expected_prev;
reg  RF_Rp_rd_expected_prev;
reg [3:0] RF_Rq_addr_expected_prev;
reg  RF_Rq_rd_expected_prev;
reg  RF_s0_expected_prev;
reg  RF_s1_expected_prev;
reg [3:0] RF_w_addr_expected_prev;
reg  RF_W_wr_expected_prev;
reg [3:0] saida_expected_prev;

reg  last_alu_s0_exp;
reg  last_alu_s1_exp;
reg [7:0] last_D_addr_exp;
reg  last_D_rd_exp;
reg  last_D_wr_exp;
reg  last_I_rd_exp;
reg  last_IR_ld_exp;
reg  last_PC_clr_exp;
reg  last_PC_inc_exp;
reg  last_PC_ld_exp;
reg [3:0] last_RF_Rp_addr_exp;
reg  last_RF_Rp_rd_exp;
reg [3:0] last_RF_Rq_addr_exp;
reg  last_RF_Rq_rd_exp;
reg  last_RF_s0_exp;
reg  last_RF_s1_exp;
reg [3:0] last_RF_w_addr_exp;
reg  last_RF_W_wr_exp;
reg [3:0] last_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_s0_prev = alu_s0;
	alu_s1_prev = alu_s1;
	D_addr_prev = D_addr;
	D_rd_prev = D_rd;
	D_wr_prev = D_wr;
	I_rd_prev = I_rd;
	IR_ld_prev = IR_ld;
	PC_clr_prev = PC_clr;
	PC_inc_prev = PC_inc;
	PC_ld_prev = PC_ld;
	RF_Rp_addr_prev = RF_Rp_addr;
	RF_Rp_rd_prev = RF_Rp_rd;
	RF_Rq_addr_prev = RF_Rq_addr;
	RF_Rq_rd_prev = RF_Rq_rd;
	RF_s0_prev = RF_s0;
	RF_s1_prev = RF_s1;
	RF_w_addr_prev = RF_w_addr;
	RF_W_wr_prev = RF_W_wr;
	saida_prev = saida;
end

// update expected /o prevs

always @(trigger)
begin
	alu_s0_expected_prev = alu_s0_expected;
	alu_s1_expected_prev = alu_s1_expected;
	D_addr_expected_prev = D_addr_expected;
	D_rd_expected_prev = D_rd_expected;
	D_wr_expected_prev = D_wr_expected;
	I_rd_expected_prev = I_rd_expected;
	IR_ld_expected_prev = IR_ld_expected;
	PC_clr_expected_prev = PC_clr_expected;
	PC_inc_expected_prev = PC_inc_expected;
	PC_ld_expected_prev = PC_ld_expected;
	RF_Rp_addr_expected_prev = RF_Rp_addr_expected;
	RF_Rp_rd_expected_prev = RF_Rp_rd_expected;
	RF_Rq_addr_expected_prev = RF_Rq_addr_expected;
	RF_Rq_rd_expected_prev = RF_Rq_rd_expected;
	RF_s0_expected_prev = RF_s0_expected;
	RF_s1_expected_prev = RF_s1_expected;
	RF_w_addr_expected_prev = RF_w_addr_expected;
	RF_W_wr_expected_prev = RF_W_wr_expected;
	saida_expected_prev = saida_expected;
end



// expected alu_s0
initial
begin
	alu_s0_expected = 1'bX;
end 

// expected alu_s1
initial
begin
	alu_s1_expected = 1'bX;
end 
// expected D_addr[ 7 ]
initial
begin
	D_addr_expected[7] = 1'bX;
end 
// expected D_addr[ 6 ]
initial
begin
	D_addr_expected[6] = 1'bX;
end 
// expected D_addr[ 5 ]
initial
begin
	D_addr_expected[5] = 1'bX;
end 
// expected D_addr[ 4 ]
initial
begin
	D_addr_expected[4] = 1'bX;
end 
// expected D_addr[ 3 ]
initial
begin
	D_addr_expected[3] = 1'bX;
end 
// expected D_addr[ 2 ]
initial
begin
	D_addr_expected[2] = 1'bX;
end 
// expected D_addr[ 1 ]
initial
begin
	D_addr_expected[1] = 1'bX;
end 
// expected D_addr[ 0 ]
initial
begin
	D_addr_expected[0] = 1'bX;
end 

// expected D_rd
initial
begin
	D_rd_expected = 1'bX;
end 

// expected D_wr
initial
begin
	D_wr_expected = 1'bX;
end 

// expected I_rd
initial
begin
	I_rd_expected = 1'bX;
end 

// expected IR_ld
initial
begin
	IR_ld_expected = 1'bX;
end 

// expected PC_clr
initial
begin
	PC_clr_expected = 1'bX;
end 

// expected PC_inc
initial
begin
	PC_inc_expected = 1'bX;
end 

// expected PC_ld
initial
begin
	PC_ld_expected = 1'bX;
end 
// expected RF_Rp_addr[ 3 ]
initial
begin
	RF_Rp_addr_expected[3] = 1'bX;
end 
// expected RF_Rp_addr[ 2 ]
initial
begin
	RF_Rp_addr_expected[2] = 1'bX;
end 
// expected RF_Rp_addr[ 1 ]
initial
begin
	RF_Rp_addr_expected[1] = 1'bX;
end 
// expected RF_Rp_addr[ 0 ]
initial
begin
	RF_Rp_addr_expected[0] = 1'bX;
end 

// expected RF_Rp_rd
initial
begin
	RF_Rp_rd_expected = 1'bX;
end 
// expected RF_Rq_addr[ 3 ]
initial
begin
	RF_Rq_addr_expected[3] = 1'bX;
end 
// expected RF_Rq_addr[ 2 ]
initial
begin
	RF_Rq_addr_expected[2] = 1'bX;
end 
// expected RF_Rq_addr[ 1 ]
initial
begin
	RF_Rq_addr_expected[1] = 1'bX;
end 
// expected RF_Rq_addr[ 0 ]
initial
begin
	RF_Rq_addr_expected[0] = 1'bX;
end 

// expected RF_Rq_rd
initial
begin
	RF_Rq_rd_expected = 1'bX;
end 

// expected RF_s0
initial
begin
	RF_s0_expected = 1'bX;
end 

// expected RF_s1
initial
begin
	RF_s1_expected = 1'bX;
end 
// expected RF_w_addr[ 3 ]
initial
begin
	RF_w_addr_expected[3] = 1'bX;
end 
// expected RF_w_addr[ 2 ]
initial
begin
	RF_w_addr_expected[2] = 1'bX;
end 
// expected RF_w_addr[ 1 ]
initial
begin
	RF_w_addr_expected[1] = 1'bX;
end 
// expected RF_w_addr[ 0 ]
initial
begin
	RF_w_addr_expected[0] = 1'bX;
end 

// expected RF_W_wr
initial
begin
	RF_W_wr_expected = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 
// generate trigger
always @(alu_s0_expected or alu_s0 or alu_s1_expected or alu_s1 or D_addr_expected or D_addr or D_rd_expected or D_rd or D_wr_expected or D_wr or I_rd_expected or I_rd or IR_ld_expected or IR_ld or PC_clr_expected or PC_clr or PC_inc_expected or PC_inc or PC_ld_expected or PC_ld or RF_Rp_addr_expected or RF_Rp_addr or RF_Rp_rd_expected or RF_Rp_rd or RF_Rq_addr_expected or RF_Rq_addr or RF_Rq_rd_expected or RF_Rq_rd or RF_s0_expected or RF_s0 or RF_s1_expected or RF_s1 or RF_w_addr_expected or RF_w_addr or RF_W_wr_expected or RF_W_wr or saida_expected or saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_s0 = %b | expected alu_s1 = %b | expected D_addr = %b | expected D_rd = %b | expected D_wr = %b | expected I_rd = %b | expected IR_ld = %b | expected PC_clr = %b | expected PC_inc = %b | expected PC_ld = %b | expected RF_Rp_addr = %b | expected RF_Rp_rd = %b | expected RF_Rq_addr = %b | expected RF_Rq_rd = %b | expected RF_s0 = %b | expected RF_s1 = %b | expected RF_w_addr = %b | expected RF_W_wr = %b | expected saida = %b | ",alu_s0_expected_prev,alu_s1_expected_prev,D_addr_expected_prev,D_rd_expected_prev,D_wr_expected_prev,I_rd_expected_prev,IR_ld_expected_prev,PC_clr_expected_prev,PC_inc_expected_prev,PC_ld_expected_prev,RF_Rp_addr_expected_prev,RF_Rp_rd_expected_prev,RF_Rq_addr_expected_prev,RF_Rq_rd_expected_prev,RF_s0_expected_prev,RF_s1_expected_prev,RF_w_addr_expected_prev,RF_W_wr_expected_prev,saida_expected_prev);
	$display("| real alu_s0 = %b | real alu_s1 = %b | real D_addr = %b | real D_rd = %b | real D_wr = %b | real I_rd = %b | real IR_ld = %b | real PC_clr = %b | real PC_inc = %b | real PC_ld = %b | real RF_Rp_addr = %b | real RF_Rp_rd = %b | real RF_Rq_addr = %b | real RF_Rq_rd = %b | real RF_s0 = %b | real RF_s1 = %b | real RF_w_addr = %b | real RF_W_wr = %b | real saida = %b | ",alu_s0_prev,alu_s1_prev,D_addr_prev,D_rd_prev,D_wr_prev,I_rd_prev,IR_ld_prev,PC_clr_prev,PC_inc_prev,PC_ld_prev,RF_Rp_addr_prev,RF_Rp_rd_prev,RF_Rq_addr_prev,RF_Rq_rd_prev,RF_s0_prev,RF_s1_prev,RF_w_addr_prev,RF_W_wr_prev,saida_prev);
`endif
	if (
		( alu_s0_expected_prev !== 1'bx ) && ( alu_s0_prev !== alu_s0_expected_prev )
		&& ((alu_s0_expected_prev !== last_alu_s0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s0_expected_prev);
		$display ("     Real value = %b", alu_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_s0_exp = alu_s0_expected_prev;
	end
	if (
		( alu_s1_expected_prev !== 1'bx ) && ( alu_s1_prev !== alu_s1_expected_prev )
		&& ((alu_s1_expected_prev !== last_alu_s1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_s1_expected_prev);
		$display ("     Real value = %b", alu_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_s1_exp = alu_s1_expected_prev;
	end
	if (
		( D_addr_expected_prev[0] !== 1'bx ) && ( D_addr_prev[0] !== D_addr_expected_prev[0] )
		&& ((D_addr_expected_prev[0] !== last_D_addr_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[0] = D_addr_expected_prev[0];
	end
	if (
		( D_addr_expected_prev[1] !== 1'bx ) && ( D_addr_prev[1] !== D_addr_expected_prev[1] )
		&& ((D_addr_expected_prev[1] !== last_D_addr_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[1] = D_addr_expected_prev[1];
	end
	if (
		( D_addr_expected_prev[2] !== 1'bx ) && ( D_addr_prev[2] !== D_addr_expected_prev[2] )
		&& ((D_addr_expected_prev[2] !== last_D_addr_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[2] = D_addr_expected_prev[2];
	end
	if (
		( D_addr_expected_prev[3] !== 1'bx ) && ( D_addr_prev[3] !== D_addr_expected_prev[3] )
		&& ((D_addr_expected_prev[3] !== last_D_addr_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[3] = D_addr_expected_prev[3];
	end
	if (
		( D_addr_expected_prev[4] !== 1'bx ) && ( D_addr_prev[4] !== D_addr_expected_prev[4] )
		&& ((D_addr_expected_prev[4] !== last_D_addr_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[4] = D_addr_expected_prev[4];
	end
	if (
		( D_addr_expected_prev[5] !== 1'bx ) && ( D_addr_prev[5] !== D_addr_expected_prev[5] )
		&& ((D_addr_expected_prev[5] !== last_D_addr_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[5] = D_addr_expected_prev[5];
	end
	if (
		( D_addr_expected_prev[6] !== 1'bx ) && ( D_addr_prev[6] !== D_addr_expected_prev[6] )
		&& ((D_addr_expected_prev[6] !== last_D_addr_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[6] = D_addr_expected_prev[6];
	end
	if (
		( D_addr_expected_prev[7] !== 1'bx ) && ( D_addr_prev[7] !== D_addr_expected_prev[7] )
		&& ((D_addr_expected_prev[7] !== last_D_addr_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_addr_exp[7] = D_addr_expected_prev[7];
	end
	if (
		( D_rd_expected_prev !== 1'bx ) && ( D_rd_prev !== D_rd_expected_prev )
		&& ((D_rd_expected_prev !== last_D_rd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rd_expected_prev);
		$display ("     Real value = %b", D_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_rd_exp = D_rd_expected_prev;
	end
	if (
		( D_wr_expected_prev !== 1'bx ) && ( D_wr_prev !== D_wr_expected_prev )
		&& ((D_wr_expected_prev !== last_D_wr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_wr_expected_prev);
		$display ("     Real value = %b", D_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_wr_exp = D_wr_expected_prev;
	end
	if (
		( I_rd_expected_prev !== 1'bx ) && ( I_rd_prev !== I_rd_expected_prev )
		&& ((I_rd_expected_prev !== last_I_rd_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_expected_prev);
		$display ("     Real value = %b", I_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_rd_exp = I_rd_expected_prev;
	end
	if (
		( IR_ld_expected_prev !== 1'bx ) && ( IR_ld_prev !== IR_ld_expected_prev )
		&& ((IR_ld_expected_prev !== last_IR_ld_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_ld_expected_prev);
		$display ("     Real value = %b", IR_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IR_ld_exp = IR_ld_expected_prev;
	end
	if (
		( PC_clr_expected_prev !== 1'bx ) && ( PC_clr_prev !== PC_clr_expected_prev )
		&& ((PC_clr_expected_prev !== last_PC_clr_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_clr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_clr_expected_prev);
		$display ("     Real value = %b", PC_clr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_clr_exp = PC_clr_expected_prev;
	end
	if (
		( PC_inc_expected_prev !== 1'bx ) && ( PC_inc_prev !== PC_inc_expected_prev )
		&& ((PC_inc_expected_prev !== last_PC_inc_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_inc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_inc_expected_prev);
		$display ("     Real value = %b", PC_inc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_inc_exp = PC_inc_expected_prev;
	end
	if (
		( PC_ld_expected_prev !== 1'bx ) && ( PC_ld_prev !== PC_ld_expected_prev )
		&& ((PC_ld_expected_prev !== last_PC_ld_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_ld_expected_prev);
		$display ("     Real value = %b", PC_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_ld_exp = PC_ld_expected_prev;
	end
	if (
		( RF_Rp_addr_expected_prev[0] !== 1'bx ) && ( RF_Rp_addr_prev[0] !== RF_Rp_addr_expected_prev[0] )
		&& ((RF_Rp_addr_expected_prev[0] !== last_RF_Rp_addr_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RF_Rp_addr_exp[0] = RF_Rp_addr_expected_prev[0];
	end
	if (
		( RF_Rp_addr_expected_prev[1] !== 1'bx ) && ( RF_Rp_addr_prev[1] !== RF_Rp_addr_expected_prev[1] )
		&& ((RF_Rp_addr_expected_prev[1] !== last_RF_Rp_addr_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RF_Rp_addr_exp[1] = RF_Rp_addr_expected_prev[1];
	end
	if (
		( RF_Rp_addr_expected_prev[2] !== 1'bx ) && ( RF_Rp_addr_prev[2] !== RF_Rp_addr_expected_prev[2] )
		&& ((RF_Rp_addr_expected_prev[2] !== last_RF_Rp_addr_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RF_Rp_addr_exp[2] = RF_Rp_addr_expected_prev[2];
	end
	if (
		( RF_Rp_addr_expected_prev[3] !== 1'bx ) && ( RF_Rp_addr_prev[3] !== RF_Rp_addr_expected_prev[3] )
		&& ((RF_Rp_addr_expected_prev[3] !== last_RF_Rp_addr_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RF_Rp_addr_exp[3] = RF_Rp_addr_expected_prev[3];
	end
	if (
		( RF_Rp_rd_expected_prev !== 1'bx ) && ( RF_Rp_rd_prev !== RF_Rp_rd_expected_prev )
		&& ((RF_Rp_rd_expected_prev !== last_RF_Rp_rd_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_rd_expected_prev);
		$display ("     Real value = %b", RF_Rp_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Rp_rd_exp = RF_Rp_rd_expected_prev;
	end
	if (
		( RF_Rq_addr_expected_prev[0] !== 1'bx ) && ( RF_Rq_addr_prev[0] !== RF_Rq_addr_expected_prev[0] )
		&& ((RF_Rq_addr_expected_prev[0] !== last_RF_Rq_addr_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_Rq_addr_exp[0] = RF_Rq_addr_expected_prev[0];
	end
	if (
		( RF_Rq_addr_expected_prev[1] !== 1'bx ) && ( RF_Rq_addr_prev[1] !== RF_Rq_addr_expected_prev[1] )
		&& ((RF_Rq_addr_expected_prev[1] !== last_RF_Rq_addr_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_Rq_addr_exp[1] = RF_Rq_addr_expected_prev[1];
	end
	if (
		( RF_Rq_addr_expected_prev[2] !== 1'bx ) && ( RF_Rq_addr_prev[2] !== RF_Rq_addr_expected_prev[2] )
		&& ((RF_Rq_addr_expected_prev[2] !== last_RF_Rq_addr_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_Rq_addr_exp[2] = RF_Rq_addr_expected_prev[2];
	end
	if (
		( RF_Rq_addr_expected_prev[3] !== 1'bx ) && ( RF_Rq_addr_prev[3] !== RF_Rq_addr_expected_prev[3] )
		&& ((RF_Rq_addr_expected_prev[3] !== last_RF_Rq_addr_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_Rq_addr_exp[3] = RF_Rq_addr_expected_prev[3];
	end
	if (
		( RF_Rq_rd_expected_prev !== 1'bx ) && ( RF_Rq_rd_prev !== RF_Rq_rd_expected_prev )
		&& ((RF_Rq_rd_expected_prev !== last_RF_Rq_rd_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_rd_expected_prev);
		$display ("     Real value = %b", RF_Rq_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_Rq_rd_exp = RF_Rq_rd_expected_prev;
	end
	if (
		( RF_s0_expected_prev !== 1'bx ) && ( RF_s0_prev !== RF_s0_expected_prev )
		&& ((RF_s0_expected_prev !== last_RF_s0_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s0_expected_prev);
		$display ("     Real value = %b", RF_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_s0_exp = RF_s0_expected_prev;
	end
	if (
		( RF_s1_expected_prev !== 1'bx ) && ( RF_s1_prev !== RF_s1_expected_prev )
		&& ((RF_s1_expected_prev !== last_RF_s1_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_s1_expected_prev);
		$display ("     Real value = %b", RF_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_s1_exp = RF_s1_expected_prev;
	end
	if (
		( RF_w_addr_expected_prev[0] !== 1'bx ) && ( RF_w_addr_prev[0] !== RF_w_addr_expected_prev[0] )
		&& ((RF_w_addr_expected_prev[0] !== last_RF_w_addr_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_w_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_w_addr_expected_prev);
		$display ("     Real value = %b", RF_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_w_addr_exp[0] = RF_w_addr_expected_prev[0];
	end
	if (
		( RF_w_addr_expected_prev[1] !== 1'bx ) && ( RF_w_addr_prev[1] !== RF_w_addr_expected_prev[1] )
		&& ((RF_w_addr_expected_prev[1] !== last_RF_w_addr_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_w_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_w_addr_expected_prev);
		$display ("     Real value = %b", RF_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_w_addr_exp[1] = RF_w_addr_expected_prev[1];
	end
	if (
		( RF_w_addr_expected_prev[2] !== 1'bx ) && ( RF_w_addr_prev[2] !== RF_w_addr_expected_prev[2] )
		&& ((RF_w_addr_expected_prev[2] !== last_RF_w_addr_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_w_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_w_addr_expected_prev);
		$display ("     Real value = %b", RF_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_w_addr_exp[2] = RF_w_addr_expected_prev[2];
	end
	if (
		( RF_w_addr_expected_prev[3] !== 1'bx ) && ( RF_w_addr_prev[3] !== RF_w_addr_expected_prev[3] )
		&& ((RF_w_addr_expected_prev[3] !== last_RF_w_addr_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_w_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_w_addr_expected_prev);
		$display ("     Real value = %b", RF_w_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_w_addr_exp[3] = RF_w_addr_expected_prev[3];
	end
	if (
		( RF_W_wr_expected_prev !== 1'bx ) && ( RF_W_wr_prev !== RF_W_wr_expected_prev )
		&& ((RF_W_wr_expected_prev !== last_RF_W_wr_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_wr_expected_prev);
		$display ("     Real value = %b", RF_W_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_wr_exp = RF_W_wr_expected_prev;
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] d;
reg RF_Rp_zero;
reg rst;
// wires                                               
wire alu_s0;
wire alu_s1;
wire [7:0] D_addr;
wire D_rd;
wire D_wr;
wire I_rd;
wire IR_ld;
wire PC_clr;
wire PC_inc;
wire PC_ld;
wire [3:0] RF_Rp_addr;
wire RF_Rp_rd;
wire [3:0] RF_Rq_addr;
wire RF_Rq_rd;
wire RF_s0;
wire RF_s1;
wire [3:0] RF_w_addr;
wire RF_W_wr;
wire [3:0] saida;

wire sampler;                             

// assign statements (if any)                          
FSM i1 (
// port map - connection between master ports and signals/registers   
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.clk(clk),
	.d(d),
	.D_addr(D_addr),
	.D_rd(D_rd),
	.D_wr(D_wr),
	.I_rd(I_rd),
	.IR_ld(IR_ld),
	.PC_clr(PC_clr),
	.PC_inc(PC_inc),
	.PC_ld(PC_ld),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_rd(RF_Rp_rd),
	.RF_Rp_zero(RF_Rp_zero),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_rd(RF_Rq_rd),
	.RF_s0(RF_s0),
	.RF_s1(RF_s1),
	.RF_w_addr(RF_w_addr),
	.RF_W_wr(RF_W_wr),
	.rst(rst),
	.saida(saida)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// d[ 15 ]
initial
begin
	d[15] = 1'b0;
end 
// d[ 14 ]
initial
begin
	d[14] = 1'b0;
end 
// d[ 13 ]
initial
begin
	d[13] = 1'b0;
end 
// d[ 12 ]
initial
begin
	d[12] = 1'b0;
end 
// d[ 11 ]
initial
begin
	d[11] = 1'b0;
end 
// d[ 10 ]
initial
begin
	d[10] = 1'b1;
end 
// d[ 9 ]
initial
begin
	d[9] = 1'b1;
end 
// d[ 8 ]
initial
begin
	d[8] = 1'b0;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b1;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b1;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
end 

// RF_Rp_zero
initial
begin
	RF_Rp_zero = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
end 

FSM_vlg_sample_tst tb_sample (
	.clk(clk),
	.d(d),
	.RF_Rp_zero(RF_Rp_zero),
	.rst(rst),
	.sampler_tx(sampler)
);

FSM_vlg_check_tst tb_out(
	.alu_s0(alu_s0),
	.alu_s1(alu_s1),
	.D_addr(D_addr),
	.D_rd(D_rd),
	.D_wr(D_wr),
	.I_rd(I_rd),
	.IR_ld(IR_ld),
	.PC_clr(PC_clr),
	.PC_inc(PC_inc),
	.PC_ld(PC_ld),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_rd(RF_Rp_rd),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_rd(RF_Rq_rd),
	.RF_s0(RF_s0),
	.RF_s1(RF_s1),
	.RF_w_addr(RF_w_addr),
	.RF_W_wr(RF_W_wr),
	.saida(saida),
	.sampler_rx(sampler)
);
endmodule

